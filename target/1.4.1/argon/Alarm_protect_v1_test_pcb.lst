
e:/aacrs/02_12/markvisser/git_clone/ALARM_ProtectV1_test_program/Alarm_protect_v1_test_pcb/target/1.4.1/argon/Alarm_protect_v1_test_pcb.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00001e04  000d401c  000d401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000000  2003f400  2003f400  00015eb4  2**0
                  CONTENTS
  4 .data         00000068  2003e354  000d5e20  0000e354  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000434  2003e3bc  2003e3bc  0001e3bc  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000d5e88  000d5e88  00015e88  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000d5eb0  000d5eb0  00015eb0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   000c8e06  00000000  00000000  00015eb4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0000f3ce  00000000  00000000  000decba  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000191df  00000000  00000000  000ee088  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00002460  00000000  00000000  00107267  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00004068  00000000  00000000  001096c7  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00033b94  00000000  00000000  0010d72f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00024844  00000000  00000000  001412c3  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000fcab6  00000000  00000000  00165b07  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000c59c  00000000  00000000  002625c0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d401c:	4809      	ldr	r0, [pc, #36]	; (d4044 <link_dynalib_end+0x28>)
   d401e:	490a      	ldr	r1, [pc, #40]	; (d4048 <link_dynalib_end+0x2c>)
   d4020:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4022:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4024:	d005      	beq.n	d4032 <module_user_pre_init+0x16>
   d4026:	4a09      	ldr	r2, [pc, #36]	; (d404c <link_dynalib_end+0x30>)
   d4028:	4282      	cmp	r2, r0
   d402a:	d002      	beq.n	d4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d402c:	1a12      	subs	r2, r2, r0
   d402e:	f001 fc36 	bl	d589e <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4032:	4807      	ldr	r0, [pc, #28]	; (d4050 <link_dynalib_end+0x34>)
   d4034:	4a07      	ldr	r2, [pc, #28]	; (d4054 <link_dynalib_end+0x38>)
   d4036:	2100      	movs	r1, #0
   d4038:	1a12      	subs	r2, r2, r0
   d403a:	f001 fc3b 	bl	d58b4 <memset>
    return &link_global_data_start;
}
   d403e:	4801      	ldr	r0, [pc, #4]	; (d4044 <link_dynalib_end+0x28>)
   d4040:	bd08      	pop	{r3, pc}
   d4042:	bf00      	nop
   d4044:	2003e354 	.word	0x2003e354
   d4048:	000d5e20 	.word	0x000d5e20
   d404c:	2003e3bc 	.word	0x2003e3bc
   d4050:	2003e3bc 	.word	0x2003e3bc
   d4054:	2003e7f0 	.word	0x2003e7f0

000d4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405a:	f000 feb7 	bl	d4dcc <module_user_init_hook>
   d405e:	4c07      	ldr	r4, [pc, #28]	; (d407c <module_user_init+0x24>)
   d4060:	4b07      	ldr	r3, [pc, #28]	; (d4080 <module_user_init+0x28>)
   d4062:	1ae4      	subs	r4, r4, r3
   d4064:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	2500      	movs	r5, #0
   d4068:	461e      	mov	r6, r3
   d406a:	42a5      	cmp	r5, r4
   d406c:	d004      	beq.n	d4078 <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d406e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4072:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4074:	3501      	adds	r5, #1
   d4076:	e7f8      	b.n	d406a <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4078:	bd70      	pop	{r4, r5, r6, pc}
   d407a:	bf00      	nop
   d407c:	000d5e1c 	.word	0x000d5e1c
   d4080:	000d5de0 	.word	0x000d5de0

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f000 b815 	b.w	d40b2 <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f000 f855 	bl	d4138 <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4092:	f000 be69 	b.w	d4d68 <_post_loop>

000d4096 <_Znwj>:
   d4096:	f000 ba7f 	b.w	d4598 <malloc>

000d409a <_ZdlPv>:
   d409a:	f000 ba85 	b.w	d45a8 <free>

000d409e <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d409e:	f000 ba83 	b.w	d45a8 <free>

000d40a2 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40a2:	7800      	ldrb	r0, [r0, #0]
   d40a4:	fab0 f080 	clz	r0, r0
   d40a8:	0940      	lsrs	r0, r0, #5
   d40aa:	4770      	bx	lr

000d40ac <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40ac:	2301      	movs	r3, #1
   d40ae:	7003      	strb	r3, [r0, #0]
   d40b0:	4770      	bx	lr

000d40b2 <setup>:
            millis() - ms < msDelay;  
            Particle.process());
}


void setup() {
   d40b2:	b573      	push	{r0, r1, r4, r5, r6, lr}
    static String deviceID(void) { return SystemClass::deviceID(); }

#if HAL_PLATFORM_CLOUD_UDP
    static void keepAlive(unsigned sec)
    {
        particle::protocol::connection_properties_t conn_prop = {0};
   d40b4:	2400      	movs	r4, #0

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d40b6:	2001      	movs	r0, #1
   d40b8:	f000 f9e2 	bl	d4480 <set_system_mode>
        conn_prop.size = sizeof(conn_prop);
        conn_prop.keepalive_source = particle::protocol::KeepAliveSource::USER;
   d40bc:	2501      	movs	r5, #1
        CLOUD_FN(spark_set_connection_property(particle::protocol::Connection::PING,
                                               sec * 1000, &conn_prop, nullptr),
                 (void)0);
   d40be:	4623      	mov	r3, r4
   d40c0:	466a      	mov	r2, sp

#if HAL_PLATFORM_CLOUD_UDP
    static void keepAlive(unsigned sec)
    {
        particle::protocol::connection_properties_t conn_prop = {0};
        conn_prop.size = sizeof(conn_prop);
   d40c2:	2608      	movs	r6, #8
        conn_prop.keepalive_source = particle::protocol::KeepAliveSource::USER;
        CLOUD_FN(spark_set_connection_property(particle::protocol::Connection::PING,
                                               sec * 1000, &conn_prop, nullptr),
                 (void)0);
   d40c4:	f644 6120 	movw	r1, #20000	; 0x4e20
   d40c8:	4620      	mov	r0, r4
    static String deviceID(void) { return SystemClass::deviceID(); }

#if HAL_PLATFORM_CLOUD_UDP
    static void keepAlive(unsigned sec)
    {
        particle::protocol::connection_properties_t conn_prop = {0};
   d40ca:	9400      	str	r4, [sp, #0]
        conn_prop.size = sizeof(conn_prop);
        conn_prop.keepalive_source = particle::protocol::KeepAliveSource::USER;
   d40cc:	9501      	str	r5, [sp, #4]

#if HAL_PLATFORM_CLOUD_UDP
    static void keepAlive(unsigned sec)
    {
        particle::protocol::connection_properties_t conn_prop = {0};
        conn_prop.size = sizeof(conn_prop);
   d40ce:	f8ad 6000 	strh.w	r6, [sp]
        conn_prop.keepalive_source = particle::protocol::KeepAliveSource::USER;
        CLOUD_FN(spark_set_connection_property(particle::protocol::Connection::PING,
                                               sec * 1000, &conn_prop, nullptr),
                 (void)0);
   d40d2:	f000 fa51 	bl	d4578 <spark_set_connection_property>
  SYSTEM_MODE(AUTOMATIC);
  Particle.keepAlive(20);
  Serial.begin(115200);
   d40d6:	f000 ff67 	bl	d4fa8 <_Z16_fetch_usbserialv>
   d40da:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
   d40de:	f000 ff57 	bl	d4f90 <_ZN9USBSerial5beginEl>
  pinMode(RELAY1, OUTPUT);//output for triggered led
   d40e2:	4629      	mov	r1, r5
   d40e4:	2004      	movs	r0, #4
   d40e6:	f001 fa01 	bl	d54ec <pinMode>
  pinMode(RELAY2, OUTPUT);//output for triggered led
   d40ea:	4629      	mov	r1, r5
   d40ec:	2005      	movs	r0, #5
   d40ee:	f001 f9fd 	bl	d54ec <pinMode>
  pinMode(led_red, OUTPUT);//output for triggered led
   d40f2:	4629      	mov	r1, r5
   d40f4:	2007      	movs	r0, #7
   d40f6:	f001 f9f9 	bl	d54ec <pinMode>
  pinMode(led_green, OUTPUT);//output for triggered led
   d40fa:	4629      	mov	r1, r5
   d40fc:	2006      	movs	r0, #6
   d40fe:	f001 f9f5 	bl	d54ec <pinMode>
  pinMode(led_blue, OUTPUT);//output for triggered led
   d4102:	4629      	mov	r1, r5
   d4104:	4630      	mov	r0, r6
   d4106:	f001 f9f1 	bl	d54ec <pinMode>
  pinMode(LOAD, INPUT);//output for triggered led
   d410a:	4621      	mov	r1, r4
   d410c:	2012      	movs	r0, #18
   d410e:	f001 f9ed 	bl	d54ec <pinMode>
  pinMode(CLEAR, INPUT);//output for triggered led
   d4112:	4621      	mov	r1, r4
   d4114:	2002      	movs	r0, #2
   d4116:	f001 f9e9 	bl	d54ec <pinMode>
  pinMode(BATT, INPUT); // argon battery 
   d411a:	4621      	mov	r1, r4
   d411c:	2021      	movs	r0, #33	; 0x21
   d411e:	f001 f9e5 	bl	d54ec <pinMode>
  BLE.setTxPower(4); // Use lower power // Use lower power -20, -16, -12, -8, -4, 0, 4, 8.
   d4122:	f000 fb63 	bl	d47ec <_ZN8particle14BleLocalDevice11getInstanceEv>
   d4126:	2104      	movs	r1, #4
   d4128:	f000 fb7e 	bl	d4828 <_ZNK8particle14BleLocalDevice10setTxPowerEa>
  //Remote Reset Particle Function, to reset device from the cloud
  pinMode(BATT, INPUT);
   d412c:	4621      	mov	r1, r4
   d412e:	2021      	movs	r0, #33	; 0x21
   d4130:	f001 f9dc 	bl	d54ec <pinMode>
}
   d4134:	b002      	add	sp, #8
   d4136:	bd70      	pop	{r4, r5, r6, pc}

000d4138 <loop>:
        
void loop() {
   d4138:	b508      	push	{r3, lr}

  digitalWrite (RELAY1, LOW);
   d413a:	2100      	movs	r1, #0
   d413c:	2004      	movs	r0, #4
   d413e:	f001 f9e6 	bl	d550e <digitalWrite>
  delay(1000);
   d4142:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d4146:	f000 fdd1 	bl	d4cec <delay>
  digitalWrite (RELAY1, HIGH);
   d414a:	2101      	movs	r1, #1
   d414c:	2004      	movs	r0, #4
   d414e:	f001 f9de 	bl	d550e <digitalWrite>
  delay(1000);
   d4152:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d4156:	f000 fdc9 	bl	d4cec <delay>
    digitalWrite (RELAY2, LOW);
   d415a:	2100      	movs	r1, #0
   d415c:	2005      	movs	r0, #5
   d415e:	f001 f9d6 	bl	d550e <digitalWrite>
  delay(1000);
   d4162:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d4166:	f000 fdc1 	bl	d4cec <delay>
  digitalWrite (RELAY2, HIGH);
   d416a:	2101      	movs	r1, #1
   d416c:	2005      	movs	r0, #5
  
} // end of main
   d416e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  delay(1000);
  digitalWrite (RELAY1, HIGH);
  delay(1000);
    digitalWrite (RELAY2, LOW);
  delay(1000);
  digitalWrite (RELAY2, HIGH);
   d4172:	f001 b9cc 	b.w	d550e <digitalWrite>

000d4176 <_GLOBAL__sub_I_led2>:
  
} // end of main
   d4176:	b508      	push	{r3, lr}

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d4178:	f000 f816 	bl	d41a8 <HAL_Pin_Map>
/********************************************************************************************
*********************************************************************************************
*********************************************************************************************/
int led2 = D7;
bool DetonateSatus = 0; // holds the status for detonation.
SYSTEM_THREAD(ENABLED);
   d417c:	2100      	movs	r1, #0
   d417e:	2001      	movs	r0, #1
  delay(1000);
    digitalWrite (RELAY2, LOW);
  delay(1000);
  digitalWrite (RELAY2, HIGH);
  
} // end of main
   d4180:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
/********************************************************************************************
*********************************************************************************************
*********************************************************************************************/
int led2 = D7;
bool DetonateSatus = 0; // holds the status for detonation.
SYSTEM_THREAD(ENABLED);
   d4184:	f000 b98c 	b.w	d44a0 <system_thread_set_state>

000d4188 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d4188:	b508      	push	{r3, lr}
   d418a:	4b02      	ldr	r3, [pc, #8]	; (d4194 <netdb_freeaddrinfo+0xc>)
   d418c:	681b      	ldr	r3, [r3, #0]
   d418e:	689b      	ldr	r3, [r3, #8]
   d4190:	9301      	str	r3, [sp, #4]
   d4192:	bd08      	pop	{r3, pc}
   d4194:	00030268 	.word	0x00030268

000d4198 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d4198:	b508      	push	{r3, lr}
   d419a:	4b02      	ldr	r3, [pc, #8]	; (d41a4 <netdb_getaddrinfo+0xc>)
   d419c:	681b      	ldr	r3, [r3, #0]
   d419e:	68db      	ldr	r3, [r3, #12]
   d41a0:	9301      	str	r3, [sp, #4]
   d41a2:	bd08      	pop	{r3, pc}
   d41a4:	00030268 	.word	0x00030268

000d41a8 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   d41a8:	b508      	push	{r3, lr}
   d41aa:	4b02      	ldr	r3, [pc, #8]	; (d41b4 <HAL_Pin_Map+0xc>)
   d41ac:	681b      	ldr	r3, [r3, #0]
   d41ae:	681b      	ldr	r3, [r3, #0]
   d41b0:	9301      	str	r3, [sp, #4]
   d41b2:	bd08      	pop	{r3, pc}
   d41b4:	0003022c 	.word	0x0003022c

000d41b8 <HAL_Pin_Mode>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d41b8:	b508      	push	{r3, lr}
   d41ba:	4b02      	ldr	r3, [pc, #8]	; (d41c4 <HAL_Pin_Mode+0xc>)
   d41bc:	681b      	ldr	r3, [r3, #0]
   d41be:	689b      	ldr	r3, [r3, #8]
   d41c0:	9301      	str	r3, [sp, #4]
   d41c2:	bd08      	pop	{r3, pc}
   d41c4:	0003022c 	.word	0x0003022c

000d41c8 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d41c8:	b508      	push	{r3, lr}
   d41ca:	4b02      	ldr	r3, [pc, #8]	; (d41d4 <HAL_Get_Pin_Mode+0xc>)
   d41cc:	681b      	ldr	r3, [r3, #0]
   d41ce:	68db      	ldr	r3, [r3, #12]
   d41d0:	9301      	str	r3, [sp, #4]
   d41d2:	bd08      	pop	{r3, pc}
   d41d4:	0003022c 	.word	0x0003022c

000d41d8 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d41d8:	b508      	push	{r3, lr}
   d41da:	4b02      	ldr	r3, [pc, #8]	; (d41e4 <HAL_GPIO_Write+0xc>)
   d41dc:	681b      	ldr	r3, [r3, #0]
   d41de:	691b      	ldr	r3, [r3, #16]
   d41e0:	9301      	str	r3, [sp, #4]
   d41e2:	bd08      	pop	{r3, pc}
   d41e4:	0003022c 	.word	0x0003022c

000d41e8 <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
   d41e8:	b508      	push	{r3, lr}
   d41ea:	4b02      	ldr	r3, [pc, #8]	; (d41f4 <HAL_SPI_Init+0xc>)
   d41ec:	681b      	ldr	r3, [r3, #0]
   d41ee:	69db      	ldr	r3, [r3, #28]
   d41f0:	9301      	str	r3, [sp, #4]
   d41f2:	bd08      	pop	{r3, pc}
   d41f4:	00030230 	.word	0x00030230

000d41f8 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
   d41f8:	b508      	push	{r3, lr}
   d41fa:	4b02      	ldr	r3, [pc, #8]	; (d4204 <HAL_SPI_Is_Enabled+0xc>)
   d41fc:	681b      	ldr	r3, [r3, #0]
   d41fe:	6a1b      	ldr	r3, [r3, #32]
   d4200:	9301      	str	r3, [sp, #4]
   d4202:	bd08      	pop	{r3, pc}
   d4204:	00030230 	.word	0x00030230

000d4208 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d4208:	b508      	push	{r3, lr}
   d420a:	4b02      	ldr	r3, [pc, #8]	; (d4214 <HAL_RNG_GetRandomNumber+0xc>)
   d420c:	681b      	ldr	r3, [r3, #0]
   d420e:	685b      	ldr	r3, [r3, #4]
   d4210:	9301      	str	r3, [sp, #4]
   d4212:	bd08      	pop	{r3, pc}
   d4214:	00030218 	.word	0x00030218

000d4218 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d4218:	b508      	push	{r3, lr}
   d421a:	4b02      	ldr	r3, [pc, #8]	; (d4224 <HAL_Delay_Microseconds+0xc>)
   d421c:	681b      	ldr	r3, [r3, #0]
   d421e:	68db      	ldr	r3, [r3, #12]
   d4220:	9301      	str	r3, [sp, #4]
   d4222:	bd08      	pop	{r3, pc}
   d4224:	00030218 	.word	0x00030218

000d4228 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d4228:	b508      	push	{r3, lr}
   d422a:	4b02      	ldr	r3, [pc, #8]	; (d4234 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d422c:	681b      	ldr	r3, [r3, #0]
   d422e:	695b      	ldr	r3, [r3, #20]
   d4230:	9301      	str	r3, [sp, #4]
   d4232:	bd08      	pop	{r3, pc}
   d4234:	00030218 	.word	0x00030218

000d4238 <hal_ble_stack_init>:

DYNALIB_BEGIN(hal_ble)

DYNALIB_FN(0, hal_ble, hal_ble_lock, int(void*))
DYNALIB_FN(1, hal_ble, hal_ble_unlock, int(void*))
DYNALIB_FN(2, hal_ble, hal_ble_stack_init, int(void*))
   d4238:	b508      	push	{r3, lr}
   d423a:	4b02      	ldr	r3, [pc, #8]	; (d4244 <hal_ble_stack_init+0xc>)
   d423c:	681b      	ldr	r3, [r3, #0]
   d423e:	689b      	ldr	r3, [r3, #8]
   d4240:	9301      	str	r3, [sp, #4]
   d4242:	bd08      	pop	{r3, pc}
   d4244:	00030278 	.word	0x00030278

000d4248 <hal_ble_gap_set_tx_power>:
DYNALIB_FN(11, hal_ble, hal_ble_gap_get_appearance, int(ble_sig_appearance_t*, void*))
DYNALIB_FN(12, hal_ble, hal_ble_gap_set_ppcp, int(const hal_ble_conn_params_t*, void*))
DYNALIB_FN(13, hal_ble, hal_ble_gap_get_ppcp, int(hal_ble_conn_params_t*, void*))
DYNALIB_FN(14, hal_ble, hal_ble_gap_add_whitelist, int(const hal_ble_addr_t*, size_t, void*))
DYNALIB_FN(15, hal_ble, hal_ble_gap_delete_whitelist, int(void*))
DYNALIB_FN(16, hal_ble, hal_ble_gap_set_tx_power, int(int8_t, void*))
   d4248:	b508      	push	{r3, lr}
   d424a:	4b02      	ldr	r3, [pc, #8]	; (d4254 <hal_ble_gap_set_tx_power+0xc>)
   d424c:	681b      	ldr	r3, [r3, #0]
   d424e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d4250:	9301      	str	r3, [sp, #4]
   d4252:	bd08      	pop	{r3, pc}
   d4254:	00030278 	.word	0x00030278

000d4258 <hal_ble_gap_disconnect>:
DYNALIB_FN(33, hal_ble, hal_ble_gap_stop_scan, int(void*))
DYNALIB_FN(34, hal_ble, hal_ble_gap_connect_deprecated, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(35, hal_ble, hal_ble_gap_is_connecting, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(36, hal_ble, hal_ble_gap_is_connected, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(37, hal_ble, hal_ble_gap_connect_cancel, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(38, hal_ble, hal_ble_gap_disconnect, int(hal_ble_conn_handle_t, void*))
   d4258:	b508      	push	{r3, lr}
   d425a:	4b03      	ldr	r3, [pc, #12]	; (d4268 <hal_ble_gap_disconnect+0x10>)
   d425c:	681b      	ldr	r3, [r3, #0]
   d425e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
   d4262:	9301      	str	r3, [sp, #4]
   d4264:	bd08      	pop	{r3, pc}
   d4266:	0000      	.short	0x0000
   d4268:	00030278 	.word	0x00030278

000d426c <hal_ble_set_callback_on_periph_link_events>:
DYNALIB_FN(56, hal_ble, hal_ble_gatt_client_read, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, uint8_t*, size_t, void*))

DYNALIB_FN(57, hal_ble, hal_ble_gap_connect, int(const hal_ble_conn_cfg_t*, hal_ble_conn_handle_t*, void*))
DYNALIB_FN(58, hal_ble, hal_ble_gap_get_connection_info, int(hal_ble_conn_handle_t, hal_ble_conn_info_t*, void*))
DYNALIB_FN(59, hal_ble, hal_ble_gatt_server_add_characteristic, int(const hal_ble_char_init_t*, hal_ble_char_handles_t*, void*))
DYNALIB_FN(60, hal_ble, hal_ble_set_callback_on_periph_link_events, int(hal_ble_on_link_evt_cb_t, void*, void*))
   d426c:	b508      	push	{r3, lr}
   d426e:	4b03      	ldr	r3, [pc, #12]	; (d427c <hal_ble_set_callback_on_periph_link_events+0x10>)
   d4270:	681b      	ldr	r3, [r3, #0]
   d4272:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
   d4276:	9301      	str	r3, [sp, #4]
   d4278:	bd08      	pop	{r3, pc}
   d427a:	0000      	.short	0x0000
   d427c:	00030278 	.word	0x00030278

000d4280 <os_thread_is_current>:
DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d4280:	b508      	push	{r3, lr}
   d4282:	4b02      	ldr	r3, [pc, #8]	; (d428c <os_thread_is_current+0xc>)
   d4284:	681b      	ldr	r3, [r3, #0]
   d4286:	689b      	ldr	r3, [r3, #8]
   d4288:	9301      	str	r3, [sp, #4]
   d428a:	bd08      	pop	{r3, pc}
   d428c:	00030248 	.word	0x00030248

000d4290 <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d4290:	b508      	push	{r3, lr}
   d4292:	4b02      	ldr	r3, [pc, #8]	; (d429c <os_thread_join+0xc>)
   d4294:	681b      	ldr	r3, [r3, #0]
   d4296:	691b      	ldr	r3, [r3, #16]
   d4298:	9301      	str	r3, [sp, #4]
   d429a:	bd08      	pop	{r3, pc}
   d429c:	00030248 	.word	0x00030248

000d42a0 <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d42a0:	b508      	push	{r3, lr}
   d42a2:	4b02      	ldr	r3, [pc, #8]	; (d42ac <os_thread_cleanup+0xc>)
   d42a4:	681b      	ldr	r3, [r3, #0]
   d42a6:	695b      	ldr	r3, [r3, #20]
   d42a8:	9301      	str	r3, [sp, #4]
   d42aa:	bd08      	pop	{r3, pc}
   d42ac:	00030248 	.word	0x00030248

000d42b0 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   d42b0:	b508      	push	{r3, lr}
   d42b2:	4b02      	ldr	r3, [pc, #8]	; (d42bc <os_mutex_create+0xc>)
   d42b4:	681b      	ldr	r3, [r3, #0]
   d42b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d42b8:	9301      	str	r3, [sp, #4]
   d42ba:	bd08      	pop	{r3, pc}
   d42bc:	00030248 	.word	0x00030248

000d42c0 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d42c0:	b508      	push	{r3, lr}
   d42c2:	4b02      	ldr	r3, [pc, #8]	; (d42cc <os_mutex_recursive_create+0xc>)
   d42c4:	681b      	ldr	r3, [r3, #0]
   d42c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d42c8:	9301      	str	r3, [sp, #4]
   d42ca:	bd08      	pop	{r3, pc}
   d42cc:	00030248 	.word	0x00030248

000d42d0 <os_mutex_recursive_lock>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   d42d0:	b508      	push	{r3, lr}
   d42d2:	4b02      	ldr	r3, [pc, #8]	; (d42dc <os_mutex_recursive_lock+0xc>)
   d42d4:	681b      	ldr	r3, [r3, #0]
   d42d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d42d8:	9301      	str	r3, [sp, #4]
   d42da:	bd08      	pop	{r3, pc}
   d42dc:	00030248 	.word	0x00030248

000d42e0 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   d42e0:	b508      	push	{r3, lr}
   d42e2:	4b02      	ldr	r3, [pc, #8]	; (d42ec <os_mutex_recursive_unlock+0xc>)
   d42e4:	681b      	ldr	r3, [r3, #0]
   d42e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d42e8:	9301      	str	r3, [sp, #4]
   d42ea:	bd08      	pop	{r3, pc}
   d42ec:	00030248 	.word	0x00030248

000d42f0 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d42f0:	b508      	push	{r3, lr}
   d42f2:	4b02      	ldr	r3, [pc, #8]	; (d42fc <inet_inet_ntop+0xc>)
   d42f4:	681b      	ldr	r3, [r3, #0]
   d42f6:	695b      	ldr	r3, [r3, #20]
   d42f8:	9301      	str	r3, [sp, #4]
   d42fa:	bd08      	pop	{r3, pc}
   d42fc:	00030264 	.word	0x00030264

000d4300 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d4300:	b508      	push	{r3, lr}
   d4302:	4b02      	ldr	r3, [pc, #8]	; (d430c <HAL_USART_Init+0xc>)
   d4304:	681b      	ldr	r3, [r3, #0]
   d4306:	681b      	ldr	r3, [r3, #0]
   d4308:	9301      	str	r3, [sp, #4]
   d430a:	bd08      	pop	{r3, pc}
   d430c:	0003023c 	.word	0x0003023c

000d4310 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d4310:	b508      	push	{r3, lr}
   d4312:	4b02      	ldr	r3, [pc, #8]	; (d431c <HAL_USART_Write_Data+0xc>)
   d4314:	681b      	ldr	r3, [r3, #0]
   d4316:	68db      	ldr	r3, [r3, #12]
   d4318:	9301      	str	r3, [sp, #4]
   d431a:	bd08      	pop	{r3, pc}
   d431c:	0003023c 	.word	0x0003023c

000d4320 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d4320:	b508      	push	{r3, lr}
   d4322:	4b02      	ldr	r3, [pc, #8]	; (d432c <HAL_USART_Available_Data+0xc>)
   d4324:	681b      	ldr	r3, [r3, #0]
   d4326:	691b      	ldr	r3, [r3, #16]
   d4328:	9301      	str	r3, [sp, #4]
   d432a:	bd08      	pop	{r3, pc}
   d432c:	0003023c 	.word	0x0003023c

000d4330 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d4330:	b508      	push	{r3, lr}
   d4332:	4b02      	ldr	r3, [pc, #8]	; (d433c <HAL_USART_Read_Data+0xc>)
   d4334:	681b      	ldr	r3, [r3, #0]
   d4336:	695b      	ldr	r3, [r3, #20]
   d4338:	9301      	str	r3, [sp, #4]
   d433a:	bd08      	pop	{r3, pc}
   d433c:	0003023c 	.word	0x0003023c

000d4340 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d4340:	b508      	push	{r3, lr}
   d4342:	4b02      	ldr	r3, [pc, #8]	; (d434c <HAL_USART_Peek_Data+0xc>)
   d4344:	681b      	ldr	r3, [r3, #0]
   d4346:	699b      	ldr	r3, [r3, #24]
   d4348:	9301      	str	r3, [sp, #4]
   d434a:	bd08      	pop	{r3, pc}
   d434c:	0003023c 	.word	0x0003023c

000d4350 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d4350:	b508      	push	{r3, lr}
   d4352:	4b02      	ldr	r3, [pc, #8]	; (d435c <HAL_USART_Flush_Data+0xc>)
   d4354:	681b      	ldr	r3, [r3, #0]
   d4356:	69db      	ldr	r3, [r3, #28]
   d4358:	9301      	str	r3, [sp, #4]
   d435a:	bd08      	pop	{r3, pc}
   d435c:	0003023c 	.word	0x0003023c

000d4360 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
   d4360:	b508      	push	{r3, lr}
   d4362:	4b02      	ldr	r3, [pc, #8]	; (d436c <HAL_USART_Is_Enabled+0xc>)
   d4364:	681b      	ldr	r3, [r3, #0]
   d4366:	6a1b      	ldr	r3, [r3, #32]
   d4368:	9301      	str	r3, [sp, #4]
   d436a:	bd08      	pop	{r3, pc}
   d436c:	0003023c 	.word	0x0003023c

000d4370 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d4370:	b508      	push	{r3, lr}
   d4372:	4b02      	ldr	r3, [pc, #8]	; (d437c <HAL_USART_Available_Data_For_Write+0xc>)
   d4374:	681b      	ldr	r3, [r3, #0]
   d4376:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4378:	9301      	str	r3, [sp, #4]
   d437a:	bd08      	pop	{r3, pc}
   d437c:	0003023c 	.word	0x0003023c

000d4380 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
   d4380:	b508      	push	{r3, lr}
   d4382:	4b02      	ldr	r3, [pc, #8]	; (d438c <HAL_I2C_Write_Data+0xc>)
   d4384:	681b      	ldr	r3, [r3, #0]
   d4386:	6a1b      	ldr	r3, [r3, #32]
   d4388:	9301      	str	r3, [sp, #4]
   d438a:	bd08      	pop	{r3, pc}
   d438c:	00030228 	.word	0x00030228

000d4390 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
   d4390:	b508      	push	{r3, lr}
   d4392:	4b02      	ldr	r3, [pc, #8]	; (d439c <HAL_I2C_Available_Data+0xc>)
   d4394:	681b      	ldr	r3, [r3, #0]
   d4396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d4398:	9301      	str	r3, [sp, #4]
   d439a:	bd08      	pop	{r3, pc}
   d439c:	00030228 	.word	0x00030228

000d43a0 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
   d43a0:	b508      	push	{r3, lr}
   d43a2:	4b02      	ldr	r3, [pc, #8]	; (d43ac <HAL_I2C_Read_Data+0xc>)
   d43a4:	681b      	ldr	r3, [r3, #0]
   d43a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d43a8:	9301      	str	r3, [sp, #4]
   d43aa:	bd08      	pop	{r3, pc}
   d43ac:	00030228 	.word	0x00030228

000d43b0 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
   d43b0:	b508      	push	{r3, lr}
   d43b2:	4b02      	ldr	r3, [pc, #8]	; (d43bc <HAL_I2C_Peek_Data+0xc>)
   d43b4:	681b      	ldr	r3, [r3, #0]
   d43b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d43b8:	9301      	str	r3, [sp, #4]
   d43ba:	bd08      	pop	{r3, pc}
   d43bc:	00030228 	.word	0x00030228

000d43c0 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
   d43c0:	b508      	push	{r3, lr}
   d43c2:	4b02      	ldr	r3, [pc, #8]	; (d43cc <HAL_I2C_Flush_Data+0xc>)
   d43c4:	681b      	ldr	r3, [r3, #0]
   d43c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d43c8:	9301      	str	r3, [sp, #4]
   d43ca:	bd08      	pop	{r3, pc}
   d43cc:	00030228 	.word	0x00030228

000d43d0 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
   d43d0:	b508      	push	{r3, lr}
   d43d2:	4b02      	ldr	r3, [pc, #8]	; (d43dc <HAL_I2C_Is_Enabled+0xc>)
   d43d4:	681b      	ldr	r3, [r3, #0]
   d43d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d43d8:	9301      	str	r3, [sp, #4]
   d43da:	bd08      	pop	{r3, pc}
   d43dc:	00030228 	.word	0x00030228

000d43e0 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, void(HAL_I2C_Interface, void*))
   d43e0:	b508      	push	{r3, lr}
   d43e2:	4b02      	ldr	r3, [pc, #8]	; (d43ec <HAL_I2C_Init+0xc>)
   d43e4:	681b      	ldr	r3, [r3, #0]
   d43e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d43e8:	9301      	str	r3, [sp, #4]
   d43ea:	bd08      	pop	{r3, pc}
   d43ec:	00030228 	.word	0x00030228

000d43f0 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d43f0:	b508      	push	{r3, lr}
   d43f2:	4b02      	ldr	r3, [pc, #8]	; (d43fc <HAL_USB_USART_Init+0xc>)
   d43f4:	681b      	ldr	r3, [r3, #0]
   d43f6:	681b      	ldr	r3, [r3, #0]
   d43f8:	9301      	str	r3, [sp, #4]
   d43fa:	bd08      	pop	{r3, pc}
   d43fc:	0003024c 	.word	0x0003024c

000d4400 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d4400:	b508      	push	{r3, lr}
   d4402:	4b02      	ldr	r3, [pc, #8]	; (d440c <HAL_USB_USART_Begin+0xc>)
   d4404:	681b      	ldr	r3, [r3, #0]
   d4406:	685b      	ldr	r3, [r3, #4]
   d4408:	9301      	str	r3, [sp, #4]
   d440a:	bd08      	pop	{r3, pc}
   d440c:	0003024c 	.word	0x0003024c

000d4410 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d4410:	b508      	push	{r3, lr}
   d4412:	4b02      	ldr	r3, [pc, #8]	; (d441c <HAL_USB_USART_Available_Data+0xc>)
   d4414:	681b      	ldr	r3, [r3, #0]
   d4416:	691b      	ldr	r3, [r3, #16]
   d4418:	9301      	str	r3, [sp, #4]
   d441a:	bd08      	pop	{r3, pc}
   d441c:	0003024c 	.word	0x0003024c

000d4420 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d4420:	b508      	push	{r3, lr}
   d4422:	4b02      	ldr	r3, [pc, #8]	; (d442c <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d4424:	681b      	ldr	r3, [r3, #0]
   d4426:	695b      	ldr	r3, [r3, #20]
   d4428:	9301      	str	r3, [sp, #4]
   d442a:	bd08      	pop	{r3, pc}
   d442c:	0003024c 	.word	0x0003024c

000d4430 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4430:	b508      	push	{r3, lr}
   d4432:	4b02      	ldr	r3, [pc, #8]	; (d443c <HAL_USB_USART_Receive_Data+0xc>)
   d4434:	681b      	ldr	r3, [r3, #0]
   d4436:	699b      	ldr	r3, [r3, #24]
   d4438:	9301      	str	r3, [sp, #4]
   d443a:	bd08      	pop	{r3, pc}
   d443c:	0003024c 	.word	0x0003024c

000d4440 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4440:	b508      	push	{r3, lr}
   d4442:	4b02      	ldr	r3, [pc, #8]	; (d444c <HAL_USB_USART_Send_Data+0xc>)
   d4444:	681b      	ldr	r3, [r3, #0]
   d4446:	69db      	ldr	r3, [r3, #28]
   d4448:	9301      	str	r3, [sp, #4]
   d444a:	bd08      	pop	{r3, pc}
   d444c:	0003024c 	.word	0x0003024c

000d4450 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d4450:	b508      	push	{r3, lr}
   d4452:	4b02      	ldr	r3, [pc, #8]	; (d445c <HAL_USB_USART_Flush_Data+0xc>)
   d4454:	681b      	ldr	r3, [r3, #0]
   d4456:	6a1b      	ldr	r3, [r3, #32]
   d4458:	9301      	str	r3, [sp, #4]
   d445a:	bd08      	pop	{r3, pc}
   d445c:	0003024c 	.word	0x0003024c

000d4460 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   d4460:	b508      	push	{r3, lr}
   d4462:	4b02      	ldr	r3, [pc, #8]	; (d446c <panic_+0xc>)
   d4464:	681b      	ldr	r3, [r3, #0]
   d4466:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4468:	9301      	str	r3, [sp, #4]
   d446a:	bd08      	pop	{r3, pc}
   d446c:	00030260 	.word	0x00030260

000d4470 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   d4470:	b508      	push	{r3, lr}
   d4472:	4b02      	ldr	r3, [pc, #8]	; (d447c <log_message+0xc>)
   d4474:	681b      	ldr	r3, [r3, #0]
   d4476:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d4478:	9301      	str	r3, [sp, #4]
   d447a:	bd08      	pop	{r3, pc}
   d447c:	00030260 	.word	0x00030260

000d4480 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d4480:	b508      	push	{r3, lr}
   d4482:	4b02      	ldr	r3, [pc, #8]	; (d448c <set_system_mode+0xc>)
   d4484:	681b      	ldr	r3, [r3, #0]
   d4486:	685b      	ldr	r3, [r3, #4]
   d4488:	9301      	str	r3, [sp, #4]
   d448a:	bd08      	pop	{r3, pc}
   d448c:	00030220 	.word	0x00030220

000d4490 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d4490:	b508      	push	{r3, lr}
   d4492:	4b02      	ldr	r3, [pc, #8]	; (d449c <system_delay_ms+0xc>)
   d4494:	681b      	ldr	r3, [r3, #0]
   d4496:	695b      	ldr	r3, [r3, #20]
   d4498:	9301      	str	r3, [sp, #4]
   d449a:	bd08      	pop	{r3, pc}
   d449c:	00030220 	.word	0x00030220

000d44a0 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   d44a0:	b508      	push	{r3, lr}
   d44a2:	4b02      	ldr	r3, [pc, #8]	; (d44ac <system_thread_set_state+0xc>)
   d44a4:	681b      	ldr	r3, [r3, #0]
   d44a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d44a8:	9301      	str	r3, [sp, #4]
   d44aa:	bd08      	pop	{r3, pc}
   d44ac:	00030220 	.word	0x00030220

000d44b0 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d44b0:	b508      	push	{r3, lr}
   d44b2:	4b03      	ldr	r3, [pc, #12]	; (d44c0 <system_ctrl_set_app_request_handler+0x10>)
   d44b4:	681b      	ldr	r3, [r3, #0]
   d44b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d44ba:	9301      	str	r3, [sp, #4]
   d44bc:	bd08      	pop	{r3, pc}
   d44be:	0000      	.short	0x0000
   d44c0:	00030220 	.word	0x00030220

000d44c4 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d44c4:	b508      	push	{r3, lr}
   d44c6:	4b03      	ldr	r3, [pc, #12]	; (d44d4 <system_ctrl_set_result+0x10>)
   d44c8:	681b      	ldr	r3, [r3, #0]
   d44ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d44ce:	9301      	str	r3, [sp, #4]
   d44d0:	bd08      	pop	{r3, pc}
   d44d2:	0000      	.short	0x0000
   d44d4:	00030220 	.word	0x00030220

000d44d8 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d44d8:	b508      	push	{r3, lr}
   d44da:	4b02      	ldr	r3, [pc, #8]	; (d44e4 <network_connect+0xc>)
   d44dc:	681b      	ldr	r3, [r3, #0]
   d44de:	685b      	ldr	r3, [r3, #4]
   d44e0:	9301      	str	r3, [sp, #4]
   d44e2:	bd08      	pop	{r3, pc}
   d44e4:	00030240 	.word	0x00030240

000d44e8 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d44e8:	b508      	push	{r3, lr}
   d44ea:	4b02      	ldr	r3, [pc, #8]	; (d44f4 <network_connecting+0xc>)
   d44ec:	681b      	ldr	r3, [r3, #0]
   d44ee:	689b      	ldr	r3, [r3, #8]
   d44f0:	9301      	str	r3, [sp, #4]
   d44f2:	bd08      	pop	{r3, pc}
   d44f4:	00030240 	.word	0x00030240

000d44f8 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d44f8:	b508      	push	{r3, lr}
   d44fa:	4b02      	ldr	r3, [pc, #8]	; (d4504 <network_disconnect+0xc>)
   d44fc:	681b      	ldr	r3, [r3, #0]
   d44fe:	68db      	ldr	r3, [r3, #12]
   d4500:	9301      	str	r3, [sp, #4]
   d4502:	bd08      	pop	{r3, pc}
   d4504:	00030240 	.word	0x00030240

000d4508 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d4508:	b508      	push	{r3, lr}
   d450a:	4b02      	ldr	r3, [pc, #8]	; (d4514 <network_ready+0xc>)
   d450c:	681b      	ldr	r3, [r3, #0]
   d450e:	691b      	ldr	r3, [r3, #16]
   d4510:	9301      	str	r3, [sp, #4]
   d4512:	bd08      	pop	{r3, pc}
   d4514:	00030240 	.word	0x00030240

000d4518 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d4518:	b508      	push	{r3, lr}
   d451a:	4b02      	ldr	r3, [pc, #8]	; (d4524 <network_on+0xc>)
   d451c:	681b      	ldr	r3, [r3, #0]
   d451e:	695b      	ldr	r3, [r3, #20]
   d4520:	9301      	str	r3, [sp, #4]
   d4522:	bd08      	pop	{r3, pc}
   d4524:	00030240 	.word	0x00030240

000d4528 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d4528:	b508      	push	{r3, lr}
   d452a:	4b02      	ldr	r3, [pc, #8]	; (d4534 <network_off+0xc>)
   d452c:	681b      	ldr	r3, [r3, #0]
   d452e:	699b      	ldr	r3, [r3, #24]
   d4530:	9301      	str	r3, [sp, #4]
   d4532:	bd08      	pop	{r3, pc}
   d4534:	00030240 	.word	0x00030240

000d4538 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d4538:	b508      	push	{r3, lr}
   d453a:	4b02      	ldr	r3, [pc, #8]	; (d4544 <network_listen+0xc>)
   d453c:	681b      	ldr	r3, [r3, #0]
   d453e:	69db      	ldr	r3, [r3, #28]
   d4540:	9301      	str	r3, [sp, #4]
   d4542:	bd08      	pop	{r3, pc}
   d4544:	00030240 	.word	0x00030240

000d4548 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d4548:	b508      	push	{r3, lr}
   d454a:	4b02      	ldr	r3, [pc, #8]	; (d4554 <network_listening+0xc>)
   d454c:	681b      	ldr	r3, [r3, #0]
   d454e:	6a1b      	ldr	r3, [r3, #32]
   d4550:	9301      	str	r3, [sp, #4]
   d4552:	bd08      	pop	{r3, pc}
   d4554:	00030240 	.word	0x00030240

000d4558 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d4558:	b508      	push	{r3, lr}
   d455a:	4b02      	ldr	r3, [pc, #8]	; (d4564 <network_set_listen_timeout+0xc>)
   d455c:	681b      	ldr	r3, [r3, #0]
   d455e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4560:	9301      	str	r3, [sp, #4]
   d4562:	bd08      	pop	{r3, pc}
   d4564:	00030240 	.word	0x00030240

000d4568 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d4568:	b508      	push	{r3, lr}
   d456a:	4b02      	ldr	r3, [pc, #8]	; (d4574 <network_get_listen_timeout+0xc>)
   d456c:	681b      	ldr	r3, [r3, #0]
   d456e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4570:	9301      	str	r3, [sp, #4]
   d4572:	bd08      	pop	{r3, pc}
   d4574:	00030240 	.word	0x00030240

000d4578 <spark_set_connection_property>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
   d4578:	b508      	push	{r3, lr}
   d457a:	4b02      	ldr	r3, [pc, #8]	; (d4584 <spark_set_connection_property+0xc>)
   d457c:	681b      	ldr	r3, [r3, #0]
   d457e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d4580:	9301      	str	r3, [sp, #4]
   d4582:	bd08      	pop	{r3, pc}
   d4584:	00030244 	.word	0x00030244

000d4588 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d4588:	b508      	push	{r3, lr}
   d458a:	4b02      	ldr	r3, [pc, #8]	; (d4594 <spark_set_random_seed_from_cloud_handler+0xc>)
   d458c:	681b      	ldr	r3, [r3, #0]
   d458e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d4590:	9301      	str	r3, [sp, #4]
   d4592:	bd08      	pop	{r3, pc}
   d4594:	00030244 	.word	0x00030244

000d4598 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d4598:	b508      	push	{r3, lr}
   d459a:	4b02      	ldr	r3, [pc, #8]	; (d45a4 <malloc+0xc>)
   d459c:	681b      	ldr	r3, [r3, #0]
   d459e:	681b      	ldr	r3, [r3, #0]
   d45a0:	9301      	str	r3, [sp, #4]
   d45a2:	bd08      	pop	{r3, pc}
   d45a4:	0003021c 	.word	0x0003021c

000d45a8 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d45a8:	b508      	push	{r3, lr}
   d45aa:	4b02      	ldr	r3, [pc, #8]	; (d45b4 <free+0xc>)
   d45ac:	681b      	ldr	r3, [r3, #0]
   d45ae:	685b      	ldr	r3, [r3, #4]
   d45b0:	9301      	str	r3, [sp, #4]
   d45b2:	bd08      	pop	{r3, pc}
   d45b4:	0003021c 	.word	0x0003021c

000d45b8 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d45b8:	2200      	movs	r2, #0
   d45ba:	4611      	mov	r1, r2
   d45bc:	6840      	ldr	r0, [r0, #4]
   d45be:	f7ff bfc3 	b.w	d4548 <network_listening>

000d45c2 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d45c2:	2200      	movs	r2, #0
   d45c4:	4611      	mov	r1, r2
   d45c6:	6840      	ldr	r0, [r0, #4]
   d45c8:	f7ff bfce 	b.w	d4568 <network_get_listen_timeout>

000d45cc <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d45cc:	2200      	movs	r2, #0
   d45ce:	6840      	ldr	r0, [r0, #4]
   d45d0:	f7ff bfc2 	b.w	d4558 <network_set_listen_timeout>

000d45d4 <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d45d4:	2200      	movs	r2, #0
   d45d6:	f081 0101 	eor.w	r1, r1, #1
   d45da:	6840      	ldr	r0, [r0, #4]
   d45dc:	f7ff bfac 	b.w	d4538 <network_listen>

000d45e0 <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d45e0:	2300      	movs	r3, #0
   d45e2:	461a      	mov	r2, r3
   d45e4:	4619      	mov	r1, r3
   d45e6:	6840      	ldr	r0, [r0, #4]
   d45e8:	f7ff bf9e 	b.w	d4528 <network_off>

000d45ec <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d45ec:	2300      	movs	r3, #0
   d45ee:	461a      	mov	r2, r3
   d45f0:	4619      	mov	r1, r3
   d45f2:	6840      	ldr	r0, [r0, #4]
   d45f4:	f7ff bf90 	b.w	d4518 <network_on>

000d45f8 <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d45f8:	2200      	movs	r2, #0
   d45fa:	4611      	mov	r1, r2
   d45fc:	6840      	ldr	r0, [r0, #4]
   d45fe:	f7ff bf83 	b.w	d4508 <network_ready>

000d4602 <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d4602:	2200      	movs	r2, #0
   d4604:	4611      	mov	r1, r2
   d4606:	6840      	ldr	r0, [r0, #4]
   d4608:	f7ff bf6e 	b.w	d44e8 <network_connecting>

000d460c <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d460c:	2200      	movs	r2, #0
   d460e:	2102      	movs	r1, #2
   d4610:	6840      	ldr	r0, [r0, #4]
   d4612:	f7ff bf71 	b.w	d44f8 <network_disconnect>

000d4616 <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d4616:	2300      	movs	r3, #0
   d4618:	461a      	mov	r2, r3
   d461a:	6840      	ldr	r0, [r0, #4]
   d461c:	f7ff bf5c 	b.w	d44d8 <network_connect>

000d4620 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d4620:	4b02      	ldr	r3, [pc, #8]	; (d462c <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d4622:	2203      	movs	r2, #3
   d4624:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d4626:	4a02      	ldr	r2, [pc, #8]	; (d4630 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d4628:	601a      	str	r2, [r3, #0]
   d462a:	4770      	bx	lr
   d462c:	2003e3c0 	.word	0x2003e3c0
   d4630:	000d5940 	.word	0x000d5940

000d4634 <_ZN8SPIClassD1Ev>:
  Mutex mutex_;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
   d4634:	4770      	bx	lr

000d4636 <_ZN8SPIClassD0Ev>:
   d4636:	b510      	push	{r4, lr}
   d4638:	2110      	movs	r1, #16
   d463a:	4604      	mov	r4, r0
   d463c:	f000 ffc7 	bl	d55ce <_ZdlPvj>
   d4640:	4620      	mov	r0, r4
   d4642:	bd10      	pop	{r4, pc}

000d4644 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
  if (!info->enabled || info->default_settings)
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
   d4644:	b570      	push	{r4, r5, r6, lr}
   d4646:	4b08      	ldr	r3, [pc, #32]	; (d4668 <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
   d4648:	6003      	str	r3, [r0, #0]
   d464a:	4604      	mov	r4, r0
    Mutex(os_mutex_t handle) : handle_(handle) {}

    /**
     * Creates a new mutex.
     */
    Mutex() : handle_(nullptr)
   d464c:	2500      	movs	r5, #0
   d464e:	460e      	mov	r6, r1
   d4650:	f840 5f0c 	str.w	r5, [r0, #12]!
    {
        os_mutex_create(&handle_);
   d4654:	f7ff fe2c 	bl	d42b0 <os_mutex_create>
{
  _spi = spi;
  HAL_SPI_Init(_spi);
   d4658:	4630      	mov	r0, r6
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
  _spi = spi;
   d465a:	7126      	strb	r6, [r4, #4]
  HAL_SPI_Init(_spi);
   d465c:	f7ff fdc4 	bl	d41e8 <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
   d4660:	60a5      	str	r5, [r4, #8]
}
   d4662:	4620      	mov	r0, r4
   d4664:	bd70      	pop	{r4, r5, r6, pc}
   d4666:	bf00      	nop
   d4668:	000d5974 	.word	0x000d5974

000d466c <_ZN8SPIClass9isEnabledEv>:
  //To Do
}

bool SPIClass::isEnabled()
{
  return HAL_SPI_Is_Enabled(_spi);
   d466c:	7900      	ldrb	r0, [r0, #4]
   d466e:	f7ff bdc3 	b.w	d41f8 <HAL_SPI_Is_Enabled>
	...

000d4674 <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
   d4674:	4b04      	ldr	r3, [pc, #16]	; (d4688 <_GLOBAL__sub_I_System+0x14>)
   d4676:	2000      	movs	r0, #0
   d4678:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d467c:	7018      	strb	r0, [r3, #0]
   d467e:	8058      	strh	r0, [r3, #2]
   d4680:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d4682:	f7ff befd 	b.w	d4480 <set_system_mode>
   d4686:	bf00      	nop
   d4688:	2003e3c8 	.word	0x2003e3c8

000d468c <_ZNSt19_Sp_counted_deleterIPN8particle17BlePeerDeviceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   d468c:	4770      	bx	lr

000d468e <_ZNSt19_Sp_counted_deleterIPN8particle17BlePeerDeviceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE14_M_get_deleterERKSt9type_info>:
	  ? std::__addressof(_M_impl._M_del())
	  : nullptr;
#else
        return nullptr;
#endif
      }
   d468e:	2000      	movs	r0, #0
   d4690:	4770      	bx	lr

000d4692 <_ZNSt19_Sp_counted_deleterIPN8particle17BlePeerDeviceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED0Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   d4692:	b510      	push	{r4, lr}
   d4694:	2114      	movs	r1, #20
   d4696:	4604      	mov	r4, r0
   d4698:	f000 ff99 	bl	d55ce <_ZdlPvj>
   d469c:	4620      	mov	r0, r4
   d469e:	bd10      	pop	{r4, pc}

000d46a0 <_ZNSt19_Sp_counted_deleterIPN8particle17BlePeerDeviceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_destroyEv>:
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
   d46a0:	f7ff bcfb 	b.w	d409a <_ZdlPv>

000d46a4 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.101>:


/*******************************************************
 * BlePeerDevice class
 */
BlePeerDevice::BlePeerDevice()
   d46a4:	b508      	push	{r3, lr}
        : impl_(std::make_shared<BlePeerDeviceImpl>()) {
    if (!impl()) {
        SPARK_ASSERT(false);
   d46a6:	200a      	movs	r0, #10
   d46a8:	4a02      	ldr	r2, [pc, #8]	; (d46b4 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.101+0x10>)
   d46aa:	2100      	movs	r1, #0
   d46ac:	f7ff fed8 	bl	d4460 <panic_>
    }
}
   d46b0:	bd08      	pop	{r3, pc}
   d46b2:	bf00      	nop
   d46b4:	000d4219 	.word	0x000d4219

000d46b8 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.110>:
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d46b8:	b510      	push	{r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d46ba:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d46bc:	4604      	mov	r4, r0
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d46be:	689b      	ldr	r3, [r3, #8]
   d46c0:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d46c2:	68a3      	ldr	r3, [r4, #8]
   d46c4:	3b01      	subs	r3, #1
   d46c6:	60a3      	str	r3, [r4, #8]
   d46c8:	b92b      	cbnz	r3, d46d6 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.110+0x1e>
            _M_destroy();
   d46ca:	6823      	ldr	r3, [r4, #0]
   d46cc:	4620      	mov	r0, r4
   d46ce:	68db      	ldr	r3, [r3, #12]
        }
    }
   d46d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
          if (--_M_weak_count == 0)
            _M_destroy();
   d46d4:	4718      	bx	r3
   d46d6:	bd10      	pop	{r4, pc}

000d46d8 <_ZN8particle3ble13WiringBleLockC1Ev>:

namespace ble {

class WiringBleLock {
public:
    WiringBleLock() :
   d46d8:	b510      	push	{r4, lr}
            locked_(false) {
   d46da:	2300      	movs	r3, #0
   d46dc:	7003      	strb	r3, [r0, #0]
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
   d46de:	4b04      	ldr	r3, [pc, #16]	; (d46f0 <_ZN8particle3ble13WiringBleLockC1Ev+0x18>)

namespace ble {

class WiringBleLock {
public:
    WiringBleLock() :
   d46e0:	4604      	mov	r4, r0
   d46e2:	6818      	ldr	r0, [r3, #0]
   d46e4:	f7ff fdf4 	bl	d42d0 <os_mutex_recursive_lock>
        lock.locked_ = false;
    }

    void lock() {
        mutex_.lock();
        locked_ = true;
   d46e8:	2301      	movs	r3, #1
   d46ea:	7023      	strb	r3, [r4, #0]
class WiringBleLock {
public:
    WiringBleLock() :
            locked_(false) {
        lock();
    }
   d46ec:	4620      	mov	r0, r4
   d46ee:	bd10      	pop	{r4, pc}
   d46f0:	2003e3d8 	.word	0x2003e3d8

000d46f4 <_ZN8particle3ble13WiringBleLockD1Ev>:

    ~WiringBleLock() {
   d46f4:	b510      	push	{r4, lr}
        if (locked_) {
   d46f6:	7803      	ldrb	r3, [r0, #0]
    WiringBleLock() :
            locked_(false) {
        lock();
    }

    ~WiringBleLock() {
   d46f8:	4604      	mov	r4, r0
        if (locked_) {
   d46fa:	b11b      	cbz	r3, d4704 <_ZN8particle3ble13WiringBleLockD1Ev+0x10>
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   d46fc:	4b02      	ldr	r3, [pc, #8]	; (d4708 <_ZN8particle3ble13WiringBleLockD1Ev+0x14>)
   d46fe:	6818      	ldr	r0, [r3, #0]
   d4700:	f7ff fdee 	bl	d42e0 <os_mutex_recursive_unlock>
            unlock();
        }
    }
   d4704:	4620      	mov	r0, r4
   d4706:	bd10      	pop	{r4, pc}
   d4708:	2003e3d8 	.word	0x2003e3d8

000d470c <_ZNK8particle10BleAddresseqERKS0_>:
BleAddress& BleAddress::operator=(const uint8_t addr[BLE_SIG_ADDR_LEN]) {
    memcpy(address_.addr, addr, BLE_SIG_ADDR_LEN);
    return *this;
}

bool BleAddress::operator==(const BleAddress& addr) const {
   d470c:	b508      	push	{r3, lr}
    if (address_.addr_type == addr.address_.addr_type && !memcmp(address_.addr, addr.address_.addr, BLE_SIG_ADDR_LEN)) {
   d470e:	7982      	ldrb	r2, [r0, #6]
   d4710:	798b      	ldrb	r3, [r1, #6]
   d4712:	429a      	cmp	r2, r3
   d4714:	d106      	bne.n	d4724 <_ZNK8particle10BleAddresseqERKS0_+0x18>
   d4716:	2206      	movs	r2, #6
   d4718:	f001 f8b2 	bl	d5880 <memcmp>
   d471c:	fab0 f080 	clz	r0, r0
   d4720:	0940      	lsrs	r0, r0, #5
   d4722:	bd08      	pop	{r3, pc}
        return true;
    }
    return false;
   d4724:	2000      	movs	r0, #0
}
   d4726:	bd08      	pop	{r3, pc}

000d4728 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>:
    void onDisconnectedCallback(BleOnDisconnectedCallback callback, void* context) {
        disconnectedCb_ = callback;
        disconnectedContext_ = context;
    }

    BlePeerDevice* findPeerDevice(BleConnectionHandle connHandle) {
   d4728:	b510      	push	{r4, lr}
   d472a:	6983      	ldr	r3, [r0, #24]
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   d472c:	69c2      	ldr	r2, [r0, #28]
   d472e:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (auto& peer : peers_) {
   d4732:	4293      	cmp	r3, r2
   d4734:	4618      	mov	r0, r3
   d4736:	d006      	beq.n	d4746 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1e>
            if (peer.impl()->connHandle() == connHandle) {
   d4738:	6804      	ldr	r4, [r0, #0]
   d473a:	8824      	ldrh	r4, [r4, #0]
   d473c:	428c      	cmp	r4, r1
   d473e:	f103 0308 	add.w	r3, r3, #8
   d4742:	d1f6      	bne.n	d4732 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0xa>
   d4744:	bd10      	pop	{r4, pc}
                return &peer;
            }
        }
        return nullptr;
   d4746:	2000      	movs	r0, #0
    }
   d4748:	bd10      	pop	{r4, pc}

000d474a <_ZNK8particle13BlePeerDevice7addressEv>:

void BlePeerDevice::bind(const BleAddress& address) const {
    impl()->address() = address;
}

BleAddress BlePeerDevice::address() const {
   d474a:	b510      	push	{r4, lr}
    return impl()->address();
   d474c:	680a      	ldr	r2, [r1, #0]
   d474e:	f852 3f02 	ldr.w	r3, [r2, #2]!
   d4752:	6003      	str	r3, [r0, #0]
   d4754:	6853      	ldr	r3, [r2, #4]
   d4756:	6043      	str	r3, [r0, #4]
}
   d4758:	bd10      	pop	{r4, pc}

000d475a <_ZNK8particle13BlePeerDeviceeqERKS0_>:

bool BlePeerDevice::operator==(const BlePeerDevice& device) const {
   d475a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    if (impl()->connHandle() == device.impl()->connHandle() && address() == device.address()) {
   d475c:	6802      	ldr	r2, [r0, #0]
   d475e:	680b      	ldr	r3, [r1, #0]
   d4760:	8812      	ldrh	r2, [r2, #0]
   d4762:	881b      	ldrh	r3, [r3, #0]
   d4764:	429a      	cmp	r2, r3

BleAddress BlePeerDevice::address() const {
    return impl()->address();
}

bool BlePeerDevice::operator==(const BlePeerDevice& device) const {
   d4766:	460c      	mov	r4, r1
    if (impl()->connHandle() == device.impl()->connHandle() && address() == device.address()) {
   d4768:	d10c      	bne.n	d4784 <_ZNK8particle13BlePeerDeviceeqERKS0_+0x2a>
   d476a:	4601      	mov	r1, r0
   d476c:	4668      	mov	r0, sp
   d476e:	f7ff ffec 	bl	d474a <_ZNK8particle13BlePeerDevice7addressEv>
   d4772:	4621      	mov	r1, r4
   d4774:	a802      	add	r0, sp, #8
   d4776:	f7ff ffe8 	bl	d474a <_ZNK8particle13BlePeerDevice7addressEv>
   d477a:	a902      	add	r1, sp, #8
   d477c:	4668      	mov	r0, sp
   d477e:	f7ff ffc5 	bl	d470c <_ZNK8particle10BleAddresseqERKS0_>
   d4782:	b900      	cbnz	r0, d4786 <_ZNK8particle13BlePeerDeviceeqERKS0_+0x2c>
        return true;
    }
    return false;
   d4784:	2000      	movs	r0, #0
}
   d4786:	b004      	add	sp, #16
   d4788:	bd10      	pop	{r4, pc}
	...

000d478c <_ZN8particle14BleLocalDeviceC1Ev>:


/*******************************************************
 * BleLocalDevice class
 */
BleLocalDevice::BleLocalDevice()
   d478c:	b510      	push	{r4, lr}
   d478e:	4604      	mov	r4, r0

  /// std::make_unique for single objects
  template<typename _Tp, typename... _Args>
    inline typename _MakeUniq<_Tp>::__single_object
    make_unique(_Args&&... __args)
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
   d4790:	2034      	movs	r0, #52	; 0x34
   d4792:	f7ff fc80 	bl	d4096 <_Znwj>
   d4796:	4601      	mov	r1, r0
   d4798:	b168      	cbz	r0, d47b6 <_ZN8particle14BleLocalDeviceC1Ev+0x2a>
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d479a:	2300      	movs	r3, #0
   d479c:	6003      	str	r3, [r0, #0]
   d479e:	6043      	str	r3, [r0, #4]
   d47a0:	6083      	str	r3, [r0, #8]
   d47a2:	60c3      	str	r3, [r0, #12]
   d47a4:	6103      	str	r3, [r0, #16]
   d47a6:	6143      	str	r3, [r0, #20]
   d47a8:	6183      	str	r3, [r0, #24]
   d47aa:	61c3      	str	r3, [r0, #28]
   d47ac:	6203      	str	r3, [r0, #32]
public:
    BleLocalDeviceImpl()
            : connectedCb_(nullptr),
              disconnectedCb_(nullptr),
              connectedContext_(nullptr),
              disconnectedContext_(nullptr) {
   d47ae:	6243      	str	r3, [r0, #36]	; 0x24
   d47b0:	6283      	str	r3, [r0, #40]	; 0x28
   d47b2:	62c3      	str	r3, [r0, #44]	; 0x2c
   d47b4:	6303      	str	r3, [r0, #48]	; 0x30
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d47b6:	6021      	str	r1, [r4, #0]
/*******************************************************
 * BleLocalDevice class
 */
BleLocalDevice::BleLocalDevice()
        : impl_(std::make_unique<BleLocalDeviceImpl>()) {
    if (!impl()) {
   d47b8:	b919      	cbnz	r1, d47c2 <_ZN8particle14BleLocalDeviceC1Ev+0x36>
        SPARK_ASSERT(false);
   d47ba:	4a0a      	ldr	r2, [pc, #40]	; (d47e4 <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   d47bc:	200a      	movs	r0, #10
   d47be:	f7ff fe4f 	bl	d4460 <panic_>
    }
    SPARK_ASSERT(hal_ble_stack_init(nullptr) == SYSTEM_ERROR_NONE);
   d47c2:	2000      	movs	r0, #0
   d47c4:	f7ff fd38 	bl	d4238 <hal_ble_stack_init>
   d47c8:	b120      	cbz	r0, d47d4 <_ZN8particle14BleLocalDeviceC1Ev+0x48>
   d47ca:	4a06      	ldr	r2, [pc, #24]	; (d47e4 <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   d47cc:	2100      	movs	r1, #0
   d47ce:	200a      	movs	r0, #10
   d47d0:	f7ff fe46 	bl	d4460 <panic_>
    hal_ble_set_callback_on_periph_link_events(impl()->onBleLinkEvents, impl(), nullptr);
   d47d4:	2200      	movs	r2, #0
   d47d6:	6821      	ldr	r1, [r4, #0]
   d47d8:	4803      	ldr	r0, [pc, #12]	; (d47e8 <_ZN8particle14BleLocalDeviceC1Ev+0x5c>)
   d47da:	f7ff fd47 	bl	d426c <hal_ble_set_callback_on_periph_link_events>
}
   d47de:	4620      	mov	r0, r4
   d47e0:	bd10      	pop	{r4, pc}
   d47e2:	bf00      	nop
   d47e4:	000d4219 	.word	0x000d4219
   d47e8:	000d4ac1 	.word	0x000d4ac1

000d47ec <_ZN8particle14BleLocalDevice11getInstanceEv>:

BleLocalDevice& BleLocalDevice::getInstance() {
   d47ec:	b510      	push	{r4, lr}
    static BleLocalDevice instance;
   d47ee:	4c0a      	ldr	r4, [pc, #40]	; (d4818 <_ZN8particle14BleLocalDevice11getInstanceEv+0x2c>)
   d47f0:	6823      	ldr	r3, [r4, #0]
   d47f2:	07db      	lsls	r3, r3, #31
   d47f4:	d40e      	bmi.n	d4814 <_ZN8particle14BleLocalDevice11getInstanceEv+0x28>
   d47f6:	4620      	mov	r0, r4
   d47f8:	f7ff fc53 	bl	d40a2 <__cxa_guard_acquire>
   d47fc:	b150      	cbz	r0, d4814 <_ZN8particle14BleLocalDevice11getInstanceEv+0x28>
   d47fe:	4807      	ldr	r0, [pc, #28]	; (d481c <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   d4800:	f7ff ffc4 	bl	d478c <_ZN8particle14BleLocalDeviceC1Ev>
   d4804:	4620      	mov	r0, r4
   d4806:	f7ff fc51 	bl	d40ac <__cxa_guard_release>
   d480a:	4a05      	ldr	r2, [pc, #20]	; (d4820 <_ZN8particle14BleLocalDevice11getInstanceEv+0x34>)
   d480c:	4905      	ldr	r1, [pc, #20]	; (d4824 <_ZN8particle14BleLocalDevice11getInstanceEv+0x38>)
   d480e:	4803      	ldr	r0, [pc, #12]	; (d481c <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   d4810:	f000 fed8 	bl	d55c4 <__aeabi_atexit>
    return instance;
}
   d4814:	4801      	ldr	r0, [pc, #4]	; (d481c <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   d4816:	bd10      	pop	{r4, pc}
   d4818:	2003e3d4 	.word	0x2003e3d4
   d481c:	2003e3d0 	.word	0x2003e3d0
   d4820:	2003e3bc 	.word	0x2003e3bc
   d4824:	000d48d5 	.word	0x000d48d5

000d4828 <_ZNK8particle14BleLocalDevice10setTxPowerEa>:
        name.concat(buf);
    }
    return name;
}

int BleLocalDevice::setTxPower(int8_t txPower) const {
   d4828:	b513      	push	{r0, r1, r4, lr}
   d482a:	460c      	mov	r4, r1
    WiringBleLock lk;
   d482c:	a801      	add	r0, sp, #4
   d482e:	f7ff ff53 	bl	d46d8 <_ZN8particle3ble13WiringBleLockC1Ev>
    return hal_ble_gap_set_tx_power(txPower, nullptr);
   d4832:	2100      	movs	r1, #0
   d4834:	4620      	mov	r0, r4
   d4836:	f7ff fd07 	bl	d4248 <hal_ble_gap_set_tx_power>
   d483a:	4604      	mov	r4, r0
    }
    return name;
}

int BleLocalDevice::setTxPower(int8_t txPower) const {
    WiringBleLock lk;
   d483c:	a801      	add	r0, sp, #4
   d483e:	f7ff ff59 	bl	d46f4 <_ZN8particle3ble13WiringBleLockD1Ev>
    return hal_ble_gap_set_tx_power(txPower, nullptr);
}
   d4842:	4620      	mov	r0, r4
   d4844:	b002      	add	sp, #8
   d4846:	bd10      	pop	{r4, pc}

000d4848 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
   d4848:	680b      	ldr	r3, [r1, #0]
   d484a:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
   d484c:	b113      	cbz	r3, d4854 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
   d484e:	685a      	ldr	r2, [r3, #4]
   d4850:	3201      	adds	r2, #1
   d4852:	605a      	str	r2, [r3, #4]
      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
      {
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }
   d4854:	4770      	bx	lr

000d4856 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d4856:	b510      	push	{r4, lr}
   d4858:	4604      	mov	r4, r0
      {
	if (_M_pi != nullptr)
   d485a:	6800      	ldr	r0, [r0, #0]
   d485c:	b128      	cbz	r0, d486a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d485e:	6843      	ldr	r3, [r0, #4]
   d4860:	3b01      	subs	r3, #1
   d4862:	6043      	str	r3, [r0, #4]
   d4864:	b90b      	cbnz	r3, d486a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>
   d4866:	f7ff ff27 	bl	d46b8 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.110>

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }
   d486a:	4620      	mov	r0, r4
   d486c:	bd10      	pop	{r4, pc}

000d486e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d486e:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d4870:	6804      	ldr	r4, [r0, #0]
   d4872:	6843      	ldr	r3, [r0, #4]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d4874:	4605      	mov	r5, r0
    destruct(data_, data_ + size_);
   d4876:	eb04 06c3 	add.w	r6, r4, r3, lsl #3
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d487a:	42a6      	cmp	r6, r4
   d487c:	d004      	beq.n	d4888 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0x1a>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d487e:	1d20      	adds	r0, r4, #4
   d4880:	f7ff ffe9 	bl	d4856 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4884:	3408      	adds	r4, #8
   d4886:	e7f8      	b.n	d487a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0xc>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d4888:	6828      	ldr	r0, [r5, #0]
   d488a:	f7ff fe8d 	bl	d45a8 <free>

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}
   d488e:	4628      	mov	r0, r5
   d4890:	bd70      	pop	{r4, r5, r6, pc}

000d4892 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d4892:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d4894:	6804      	ldr	r4, [r0, #0]
   d4896:	6843      	ldr	r3, [r0, #4]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d4898:	4605      	mov	r5, r0
    destruct(data_, data_ + size_);
   d489a:	eb04 06c3 	add.w	r6, r4, r3, lsl #3
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d489e:	42a6      	cmp	r6, r4
   d48a0:	d004      	beq.n	d48ac <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0x1a>
   d48a2:	1d20      	adds	r0, r4, #4
   d48a4:	f7ff ffd7 	bl	d4856 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d48a8:	3408      	adds	r4, #8
   d48aa:	e7f8      	b.n	d489e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0xc>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d48ac:	6828      	ldr	r0, [r5, #0]
   d48ae:	f7ff fe7b 	bl	d45a8 <free>

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}
   d48b2:	4628      	mov	r0, r5
   d48b4:	bd70      	pop	{r4, r5, r6, pc}

000d48b6 <_ZNSt19_Sp_counted_deleterIPN8particle17BlePeerDeviceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv>:
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
   d48b6:	b510      	push	{r4, lr}
      { _M_impl._M_del()(_M_impl._M_ptr); }
   d48b8:	6904      	ldr	r4, [r0, #16]
              address_(),
              servicesDiscovered_(false),
              characteristicsDiscovered_(false) {
    }

    ~BlePeerDeviceImpl() = default;
   d48ba:	f104 0018 	add.w	r0, r4, #24
   d48be:	f7ff ffe8 	bl	d4892 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   d48c2:	f104 000c 	add.w	r0, r4, #12
   d48c6:	f7ff ffd2 	bl	d486e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
   d48ca:	4620      	mov	r0, r4
   d48cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d48d0:	f7ff bbe3 	b.w	d409a <_ZdlPv>

000d48d4 <_ZN8particle14BleLocalDeviceD1Ev>:
        return impl_.get();
    }

private:
    BleLocalDevice();
    ~BleLocalDevice() = default;
   d48d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d48d6:	6804      	ldr	r4, [r0, #0]
   d48d8:	4607      	mov	r7, r0
   d48da:	b1c4      	cbz	r4, d490e <_ZN8particle14BleLocalDeviceD1Ev+0x3a>
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
    destruct(data_, data_ + size_);
   d48dc:	69a5      	ldr	r5, [r4, #24]
   d48de:	69e3      	ldr	r3, [r4, #28]
   d48e0:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d48e4:	42ae      	cmp	r6, r5
   d48e6:	d004      	beq.n	d48f2 <_ZN8particle14BleLocalDeviceD1Ev+0x1e>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d48e8:	1d28      	adds	r0, r5, #4
   d48ea:	f7ff ffb4 	bl	d4856 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d48ee:	3508      	adds	r5, #8
   d48f0:	e7f8      	b.n	d48e4 <_ZN8particle14BleLocalDeviceD1Ev+0x10>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d48f2:	69a0      	ldr	r0, [r4, #24]
   d48f4:	f7ff fe58 	bl	d45a8 <free>
              disconnectedCb_(nullptr),
              connectedContext_(nullptr),
              disconnectedContext_(nullptr) {
    }

    ~BleLocalDeviceImpl() = default;
   d48f8:	f104 000c 	add.w	r0, r4, #12
   d48fc:	f7ff ffc9 	bl	d4892 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   d4900:	4620      	mov	r0, r4
   d4902:	f7ff ffb4 	bl	d486e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d4906:	2134      	movs	r1, #52	; 0x34
   d4908:	4620      	mov	r0, r4
   d490a:	f000 fe60 	bl	d55ce <_ZdlPvj>
   d490e:	4638      	mov	r0, r7
   d4910:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

000d4914 <_ZN8particle13BlePeerDeviceC1Ev>:


/*******************************************************
 * BlePeerDevice class
 */
BlePeerDevice::BlePeerDevice()
   d4914:	b573      	push	{r0, r1, r4, r5, r6, lr}
        };

      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
		     _Args&&... __args)
	: _M_ptr(), _M_refcount()
   d4916:	2500      	movs	r5, #0
   d4918:	6005      	str	r5, [r0, #0]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   d491a:	6045      	str	r5, [r0, #4]
   d491c:	4606      	mov	r6, r0
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d491e:	2024      	movs	r0, #36	; 0x24
   d4920:	f7ff fbb9 	bl	d4096 <_Znwj>

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d4924:	4604      	mov	r4, r0
   d4926:	b178      	cbz	r0, d4948 <_ZN8particle13BlePeerDeviceC1Ev+0x34>
public:
    BlePeerDeviceImpl()
            : connHandle_(BLE_INVALID_CONN_HANDLE),
              address_(),
              servicesDiscovered_(false),
              characteristicsDiscovered_(false) {
   d4928:	4603      	mov	r3, r0
   d492a:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d492e:	f823 2b02 	strh.w	r2, [r3], #2

/*******************************************************
 * BleAddress class
 */
BleAddress::BleAddress()
        : address_{} {
   d4932:	f8c0 5002 	str.w	r5, [r0, #2]
   d4936:	605d      	str	r5, [r3, #4]
public:
    BlePeerDeviceImpl()
            : connHandle_(BLE_INVALID_CONN_HANDLE),
              address_(),
              servicesDiscovered_(false),
              characteristicsDiscovered_(false) {
   d4938:	7285      	strb	r5, [r0, #10]
   d493a:	72c5      	strb	r5, [r0, #11]
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d493c:	60c5      	str	r5, [r0, #12]
   d493e:	6105      	str	r5, [r0, #16]
   d4940:	6145      	str	r5, [r0, #20]
   d4942:	6185      	str	r5, [r0, #24]
   d4944:	61c5      	str	r5, [r0, #28]
   d4946:	6205      	str	r5, [r0, #32]
	__shared_count(_Ptr __p, _Deleter __d)
	: __shared_count(__p, std::move(__d), allocator<void>())
	{ }

      template<typename _Ptr, typename _Deleter, typename _Alloc>
	__shared_count(_Ptr __p, _Deleter __d, _Alloc __a) : _M_pi(0)
   d4948:	2300      	movs	r3, #0
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d494a:	2014      	movs	r0, #20
   d494c:	9301      	str	r3, [sp, #4]
   d494e:	f7ff fba2 	bl	d4096 <_Znwj>
	  __try
	    {
	      typename _Sp_cd_type::__allocator_type __a2(__a);
	      auto __guard = std::__allocate_guarded(__a2);
	      _Sp_cd_type* __mem = __guard.get();
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
   d4952:	4603      	mov	r3, r0
   d4954:	b128      	cbz	r0, d4962 <_ZN8particle13BlePeerDeviceC1Ev+0x4e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d4956:	2201      	movs	r2, #1
   d4958:	6042      	str	r2, [r0, #4]
   d495a:	6082      	str	r2, [r0, #8]
      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
      : _M_impl(__p, __d, _Alloc()) { }

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }
   d495c:	4a08      	ldr	r2, [pc, #32]	; (d4980 <_ZN8particle13BlePeerDeviceC1Ev+0x6c>)
   d495e:	6002      	str	r2, [r0, #0]
	typedef _Sp_ebo_helper<0, _Deleter>	_Del_base;
	typedef _Sp_ebo_helper<1, _Alloc>	_Alloc_base;

      public:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
	: _M_ptr(__p), _Del_base(__d), _Alloc_base(__a)
   d4960:	6104      	str	r4, [r0, #16]

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d4962:	a802      	add	r0, sp, #8
   d4964:	6872      	ldr	r2, [r6, #4]
   d4966:	f840 2d04 	str.w	r2, [r0, #-4]!
	_M_pi = __tmp;
   d496a:	6073      	str	r3, [r6, #4]
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
	  _M_refcount._M_swap(__count);
	  _M_ptr = __ptr;
   d496c:	6034      	str	r4, [r6, #0]
	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
	  // 2070. allocate_shared should use allocator_traits<A>::construct
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
   d496e:	f7ff ff72 	bl	d4856 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
/*******************************************************
 * BlePeerDevice class
 */
BlePeerDevice::BlePeerDevice()
        : impl_(std::make_shared<BlePeerDeviceImpl>()) {
    if (!impl()) {
   d4972:	6833      	ldr	r3, [r6, #0]
   d4974:	b90b      	cbnz	r3, d497a <_ZN8particle13BlePeerDeviceC1Ev+0x66>
   d4976:	f7ff fe95 	bl	d46a4 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.101>
        SPARK_ASSERT(false);
    }
}
   d497a:	4630      	mov	r0, r6
   d497c:	b002      	add	sp, #8
   d497e:	bd70      	pop	{r4, r5, r6, pc}
   d4980:	000d5984 	.word	0x000d5984

000d4984 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
        if (dest > p && dest < end) {
   d4984:	4288      	cmp	r0, r1
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
   d4986:	b570      	push	{r4, r5, r6, lr}
   d4988:	4615      	mov	r5, r2
        if (dest > p && dest < end) {
   d498a:	d91a      	bls.n	d49c2 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x3e>
   d498c:	4290      	cmp	r0, r2
   d498e:	d219      	bcs.n	d49c4 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x40>
            // Move elements in reverse order
            --p;
            --end;
            dest += end - p - 1;
   d4990:	f1a1 0608 	sub.w	r6, r1, #8
   d4994:	1a51      	subs	r1, r2, r1
   d4996:	3904      	subs	r1, #4
   d4998:	1f15      	subs	r5, r2, #4
   d499a:	1844      	adds	r4, r0, r1
            for (; end != p; --end, --dest) {
   d499c:	1f2b      	subs	r3, r5, #4
   d499e:	429e      	cmp	r6, r3
   d49a0:	d025      	beq.n	d49ee <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x6a>
                new(dest) T(std::move(*end));
   d49a2:	2c04      	cmp	r4, #4
   d49a4:	d007      	beq.n	d49b6 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x32>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d49a6:	f855 3c04 	ldr.w	r3, [r5, #-4]
   d49aa:	f844 3c04 	str.w	r3, [r4, #-4]
   d49ae:	4629      	mov	r1, r5
   d49b0:	4620      	mov	r0, r4
   d49b2:	f7ff ff49 	bl	d4848 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d49b6:	4628      	mov	r0, r5
   d49b8:	f7ff ff4d 	bl	d4856 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d49bc:	3d08      	subs	r5, #8
   d49be:	3c08      	subs	r4, #8
   d49c0:	e7ec      	b.n	d499c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x18>
                end->~T();
            }
        } else if (dest != p) {
   d49c2:	d014      	beq.n	d49ee <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x6a>
   d49c4:	1d0c      	adds	r4, r1, #4
   d49c6:	1d06      	adds	r6, r0, #4
            for (; p != end; ++p, ++dest) {
   d49c8:	1f23      	subs	r3, r4, #4
   d49ca:	429d      	cmp	r5, r3
   d49cc:	d00f      	beq.n	d49ee <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x6a>
                new(dest) T(std::move(*p));
   d49ce:	2e04      	cmp	r6, #4
   d49d0:	d007      	beq.n	d49e2 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x5e>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d49d2:	f854 3c04 	ldr.w	r3, [r4, #-4]
   d49d6:	f846 3c04 	str.w	r3, [r6, #-4]
   d49da:	4621      	mov	r1, r4
   d49dc:	4630      	mov	r0, r6
   d49de:	f7ff ff33 	bl	d4848 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d49e2:	4620      	mov	r0, r4
   d49e4:	f7ff ff37 	bl	d4856 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d49e8:	3408      	adds	r4, #8
   d49ea:	3608      	adds	r6, #8
            for (; end != p; --end, --dest) {
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
            for (; p != end; ++p, ++dest) {
   d49ec:	e7ec      	b.n	d49c8 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x44>
   d49ee:	bd70      	pop	{r4, r5, r6, pc}

000d49f0 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_>:
    move(p, p + n, data_ + size_);
    size_ -= n;
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   d49f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    T* const p = find(data_, data_ + size_, value);
   d49f4:	6804      	ldr	r4, [r0, #0]
   d49f6:	6843      	ldr	r3, [r0, #4]
    move(p, p + n, data_ + size_);
    size_ -= n;
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   d49f8:	4605      	mov	r5, r0
   d49fa:	4688      	mov	r8, r1
    T* const p = find(data_, data_ + size_, value);
   d49fc:	eb04 07c3 	add.w	r7, r4, r3, lsl #3
            }
        }
    }

    static T* find(T* p, const T* end, const T& value) {
        for (; p != end; ++p) {
   d4a00:	42a7      	cmp	r7, r4
   d4a02:	d018      	beq.n	d4a36 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x46>
            if (*p == value) {
   d4a04:	4641      	mov	r1, r8
   d4a06:	4620      	mov	r0, r4
   d4a08:	f7ff fea7 	bl	d475a <_ZNK8particle13BlePeerDeviceeqERKS0_>
   d4a0c:	4606      	mov	r6, r0
   d4a0e:	b908      	cbnz	r0, d4a14 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x24>
            }
        }
    }

    static T* find(T* p, const T* end, const T& value) {
        for (; p != end; ++p) {
   d4a10:	3408      	adds	r4, #8
   d4a12:	e7f5      	b.n	d4a00 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x10>
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
    T* const p = find(data_, data_ + size_, value);
    if (!p) {
   d4a14:	b18c      	cbz	r4, d4a3a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x4a>
   d4a16:	1d20      	adds	r0, r4, #4
   d4a18:	f7ff ff1d 	bl	d4856 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        return false;
    }
    p->~T();
    move(p, p + 1, data_ + size_);
   d4a1c:	682b      	ldr	r3, [r5, #0]
   d4a1e:	686a      	ldr	r2, [r5, #4]
   d4a20:	f104 0108 	add.w	r1, r4, #8
   d4a24:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   d4a28:	4620      	mov	r0, r4
   d4a2a:	f7ff ffab 	bl	d4984 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    --size_;
   d4a2e:	686b      	ldr	r3, [r5, #4]
   d4a30:	3b01      	subs	r3, #1
   d4a32:	606b      	str	r3, [r5, #4]
    return true;
   d4a34:	e002      	b.n	d4a3c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x4c>

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
    T* const p = find(data_, data_ + size_, value);
    if (!p) {
        return false;
   d4a36:	2600      	movs	r6, #0
   d4a38:	e000      	b.n	d4a3c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x4c>
   d4a3a:	4626      	mov	r6, r4
    }
    p->~T();
    move(p, p + 1, data_ + size_);
    --size_;
    return true;
}
   d4a3c:	4630      	mov	r0, r6
   d4a3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d4a42 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>:
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   d4a42:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d4a44:	4604      	mov	r4, r0
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d4a46:	f851 3b04 	ldr.w	r3, [r1], #4
    return insert(size_, std::move(value));
   d4a4a:	6847      	ldr	r7, [r0, #4]
   d4a4c:	9300      	str	r3, [sp, #0]
   d4a4e:	a801      	add	r0, sp, #4
   d4a50:	f7ff fefa 	bl	d4848 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d4a54:	6866      	ldr	r6, [r4, #4]
   d4a56:	68a3      	ldr	r3, [r4, #8]
   d4a58:	429e      	cmp	r6, r3
   d4a5a:	db14      	blt.n	d4a86 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x44>
   d4a5c:	3601      	adds	r6, #1
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
   d4a5e:	2e00      	cmp	r6, #0
   d4a60:	dd0b      	ble.n	d4a7a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x38>

} // particle

// spark::DefaultAllocator
inline void* spark::DefaultAllocator::malloc(size_t size) {
    return ::malloc(size);
   d4a62:	00f0      	lsls	r0, r6, #3
   d4a64:	f7ff fd98 	bl	d4598 <malloc>
    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
            d = (T*)AllocatorT::malloc(n * sizeof(T));
            if (!d) {
   d4a68:	4605      	mov	r5, r0
   d4a6a:	b318      	cbz	r0, d4ab4 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x72>
                return false;
            }
            move(d, data_, data_ + size_);
   d4a6c:	e894 0006 	ldmia.w	r4, {r1, r2}
   d4a70:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   d4a74:	f7ff ff86 	bl	d4984 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
   d4a78:	e000      	b.n	d4a7c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x3a>
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
   d4a7a:	2500      	movs	r5, #0
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d4a7c:	6820      	ldr	r0, [r4, #0]
   d4a7e:	f7ff fd93 	bl	d45a8 <free>
                return false;
            }
            move(d, data_, data_ + size_);
        }
        AllocatorT::free(data_);
        data_ = d;
   d4a82:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   d4a84:	60a6      	str	r6, [r4, #8]
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d4a86:	6826      	ldr	r6, [r4, #0]
    move(p + 1, p, data_ + size_);
   d4a88:	6862      	ldr	r2, [r4, #4]
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d4a8a:	eb06 05c7 	add.w	r5, r6, r7, lsl #3
    move(p + 1, p, data_ + size_);
   d4a8e:	eb06 02c2 	add.w	r2, r6, r2, lsl #3
   d4a92:	4629      	mov	r1, r5
   d4a94:	f105 0008 	add.w	r0, r5, #8
   d4a98:	f7ff ff74 	bl	d4984 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   d4a9c:	b135      	cbz	r5, d4aac <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x6a>
   d4a9e:	9b00      	ldr	r3, [sp, #0]
   d4aa0:	f846 3037 	str.w	r3, [r6, r7, lsl #3]
   d4aa4:	a901      	add	r1, sp, #4
   d4aa6:	1d28      	adds	r0, r5, #4
   d4aa8:	f7ff fece 	bl	d4848 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    ++size_;
   d4aac:	6863      	ldr	r3, [r4, #4]
   d4aae:	3301      	adds	r3, #1
   d4ab0:	6063      	str	r3, [r4, #4]
   d4ab2:	2501      	movs	r5, #1
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d4ab4:	a801      	add	r0, sp, #4
   d4ab6:	f7ff fece 	bl	d4856 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
    return insert(size_, std::move(value));
}
   d4aba:	4628      	mov	r0, r5
   d4abc:	b003      	add	sp, #12
   d4abe:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d4ac0 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv>:
            }
        }
        return nullptr;
    }

    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   d4ac0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d4ac4:	4604      	mov	r4, r0
   d4ac6:	b08e      	sub	sp, #56	; 0x38
        auto impl = static_cast<BleLocalDeviceImpl*>(context);
        WiringBleLock lk;
   d4ac8:	a803      	add	r0, sp, #12
            }
        }
        return nullptr;
    }

    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   d4aca:	460d      	mov	r5, r1
        auto impl = static_cast<BleLocalDeviceImpl*>(context);
        WiringBleLock lk;
   d4acc:	f7ff fe04 	bl	d46d8 <_ZN8particle3ble13WiringBleLockC1Ev>
        switch (event->type) {
   d4ad0:	6823      	ldr	r3, [r4, #0]
   d4ad2:	2b03      	cmp	r3, #3
   d4ad4:	d002      	beq.n	d4adc <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1c>
   d4ad6:	2b04      	cmp	r3, #4
   d4ad8:	d042      	beq.n	d4b60 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xa0>
   d4ada:	e087      	b.n	d4bec <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x12c>
            case BLE_EVT_CONNECTED: {
                BlePeerDevice peer;
   d4adc:	a804      	add	r0, sp, #16
   d4ade:	f7ff ff19 	bl	d4914 <_ZN8particle13BlePeerDeviceC1Ev>
                peer.impl()->connHandle() = event->conn_handle;
   d4ae2:	9b04      	ldr	r3, [sp, #16]
   d4ae4:	8922      	ldrh	r2, [r4, #8]
   d4ae6:	801a      	strh	r2, [r3, #0]
    }
    return address_.addr[i];
}

BleAddress& BleAddress::operator=(const hal_ble_addr_t& addr) {
    address_ = addr;
   d4ae8:	6862      	ldr	r2, [r4, #4]
   d4aea:	9904      	ldr	r1, [sp, #16]
   d4aec:	f852 3f08 	ldr.w	r3, [r2, #8]!
   d4af0:	f8c1 3002 	str.w	r3, [r1, #2]
   d4af4:	6853      	ldr	r3, [r2, #4]
   d4af6:	f8c1 3006 	str.w	r3, [r1, #6]
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d4afa:	a807      	add	r0, sp, #28
   d4afc:	9b04      	ldr	r3, [sp, #16]
   d4afe:	9306      	str	r3, [sp, #24]
   d4b00:	a905      	add	r1, sp, #20
   d4b02:	f7ff fea1 	bl	d4848 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        switch (event->type) {
            case BLE_EVT_CONNECTED: {
                BlePeerDevice peer;
                peer.impl()->connHandle() = event->conn_handle;
                peer.impl()->address() = event->params.connected.info->address;
                if (!impl->peers_.append(peer)) {
   d4b06:	a906      	add	r1, sp, #24
   d4b08:	f105 0018 	add.w	r0, r5, #24
   d4b0c:	f7ff ff99 	bl	d4a42 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>
   d4b10:	4604      	mov	r4, r0
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d4b12:	a807      	add	r0, sp, #28
   d4b14:	f7ff fe9f 	bl	d4856 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4b18:	2320      	movs	r3, #32
                    LOG(ERROR, "Failed to append peer Central device.");
   d4b1a:	9306      	str	r3, [sp, #24]
        switch (event->type) {
            case BLE_EVT_CONNECTED: {
                BlePeerDevice peer;
                peer.impl()->connHandle() = event->conn_handle;
                peer.impl()->address() = event->params.connected.info->address;
                if (!impl->peers_.append(peer)) {
   d4b1c:	b974      	cbnz	r4, d4b3c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x7c>
                    LOG(ERROR, "Failed to append peer Central device.");
   d4b1e:	4b36      	ldr	r3, [pc, #216]	; (d4bf8 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x138>)
   d4b20:	9300      	str	r3, [sp, #0]
   d4b22:	aa06      	add	r2, sp, #24
   d4b24:	4623      	mov	r3, r4
   d4b26:	4935      	ldr	r1, [pc, #212]	; (d4bfc <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x13c>)
   d4b28:	9407      	str	r4, [sp, #28]
   d4b2a:	2032      	movs	r0, #50	; 0x32
   d4b2c:	f7ff fca0 	bl	d4470 <log_message>
                    hal_ble_gap_disconnect(peer.impl()->connHandle(), nullptr);
   d4b30:	9b04      	ldr	r3, [sp, #16]
   d4b32:	4621      	mov	r1, r4
   d4b34:	8818      	ldrh	r0, [r3, #0]
   d4b36:	f7ff fb8f 	bl	d4258 <hal_ble_gap_disconnect>
   d4b3a:	e00d      	b.n	d4b58 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x98>
                    return;
                }
                LOG(TRACE, "Connected by Central device.");
   d4b3c:	4a30      	ldr	r2, [pc, #192]	; (d4c00 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x140>)
   d4b3e:	9200      	str	r2, [sp, #0]
   d4b40:	2300      	movs	r3, #0
   d4b42:	aa06      	add	r2, sp, #24
   d4b44:	492d      	ldr	r1, [pc, #180]	; (d4bfc <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x13c>)
   d4b46:	9307      	str	r3, [sp, #28]
   d4b48:	2001      	movs	r0, #1
   d4b4a:	f7ff fc91 	bl	d4470 <log_message>
                if (impl->connectedCb_) {
   d4b4e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   d4b50:	b113      	cbz	r3, d4b58 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x98>
                    impl->connectedCb_(peer, impl->connectedContext_);
   d4b52:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
   d4b54:	a804      	add	r0, sp, #16
   d4b56:	4798      	blx	r3
   d4b58:	a805      	add	r0, sp, #20
   d4b5a:	f7ff fe7c 	bl	d4856 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4b5e:	e045      	b.n	d4bec <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x12c>
                }
                break;
            }
            case BLE_EVT_DISCONNECTED: {
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   d4b60:	8921      	ldrh	r1, [r4, #8]
   d4b62:	4628      	mov	r0, r5
   d4b64:	f7ff fde0 	bl	d4728 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
   d4b68:	4607      	mov	r7, r0
   d4b6a:	2800      	cmp	r0, #0
   d4b6c:	d03e      	beq.n	d4bec <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x12c>
   d4b6e:	6804      	ldr	r4, [r0, #0]
   d4b70:	69a3      	ldr	r3, [r4, #24]
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   d4b72:	69e1      	ldr	r1, [r4, #28]
    Vector<BleCharacteristic>& characteristics() {
        return characteristics_;
    }

    void onDisconnected() {
        connHandle_ = BLE_INVALID_CONN_HANDLE;
   d4b74:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d4b78:	8022      	strh	r2, [r4, #0]
   d4b7a:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
        for (auto& characteristic : characteristics_) {
   d4b7e:	4299      	cmp	r1, r3
   d4b80:	d003      	beq.n	d4b8a <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xca>
   d4b82:	f853 0b08 	ldr.w	r0, [r3], #8
            characteristic.impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
   d4b86:	8042      	strh	r2, [r0, #2]
   d4b88:	e7f9      	b.n	d4b7e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xbe>
    return true;
}

template<typename T, typename AllocatorT>
inline void spark::Vector<T, AllocatorT>::clear() {
    destruct(data_, data_ + size_);
   d4b8a:	68e6      	ldr	r6, [r4, #12]
   d4b8c:	6923      	ldr	r3, [r4, #16]
   d4b8e:	eb06 08c3 	add.w	r8, r6, r3, lsl #3
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d4b92:	45b0      	cmp	r8, r6
   d4b94:	d004      	beq.n	d4ba0 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xe0>
   d4b96:	1d30      	adds	r0, r6, #4
   d4b98:	f7ff fe5d 	bl	d4856 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4b9c:	3608      	adds	r6, #8
   d4b9e:	e7f8      	b.n	d4b92 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xd2>
}

template<typename T, typename AllocatorT>
inline void spark::Vector<T, AllocatorT>::clear() {
    destruct(data_, data_ + size_);
    size_ = 0;
   d4ba0:	2300      	movs	r3, #0
   d4ba2:	6123      	str	r3, [r4, #16]
    return true;
}

template<typename T, typename AllocatorT>
inline void spark::Vector<T, AllocatorT>::clear() {
    destruct(data_, data_ + size_);
   d4ba4:	69a6      	ldr	r6, [r4, #24]
   d4ba6:	69e3      	ldr	r3, [r4, #28]
   d4ba8:	eb06 08c3 	add.w	r8, r6, r3, lsl #3
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d4bac:	45b0      	cmp	r8, r6
   d4bae:	d004      	beq.n	d4bba <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xfa>
   d4bb0:	1d30      	adds	r0, r6, #4
   d4bb2:	f7ff fe50 	bl	d4856 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4bb6:	3608      	adds	r6, #8
   d4bb8:	e7f8      	b.n	d4bac <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xec>
}

template<typename T, typename AllocatorT>
inline void spark::Vector<T, AllocatorT>::clear() {
    destruct(data_, data_ + size_);
    size_ = 0;
   d4bba:	2300      	movs	r3, #0
   d4bbc:	61e3      	str	r3, [r4, #28]
        }
        services_.clear();
        characteristics_.clear();
        servicesDiscovered_ = false;
   d4bbe:	72a3      	strb	r3, [r4, #10]
        characteristicsDiscovered_ = false;
   d4bc0:	72e3      	strb	r3, [r4, #11]
            }
            case BLE_EVT_DISCONNECTED: {
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
                if (peer) {
                    peer->impl()->onDisconnected();
                    if (impl->disconnectedCb_) {
   d4bc2:	6aab      	ldr	r3, [r5, #40]	; 0x28
   d4bc4:	b113      	cbz	r3, d4bcc <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x10c>
                        impl->disconnectedCb_(*peer, impl->disconnectedContext_);
   d4bc6:	6b29      	ldr	r1, [r5, #48]	; 0x30
   d4bc8:	4638      	mov	r0, r7
   d4bca:	4798      	blx	r3
                    }
                    LOG(TRACE, "Disconnected by remote device.");
   d4bcc:	2320      	movs	r3, #32
   d4bce:	4a0d      	ldr	r2, [pc, #52]	; (d4c04 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x144>)
   d4bd0:	9306      	str	r3, [sp, #24]
   d4bd2:	9200      	str	r2, [sp, #0]
   d4bd4:	2300      	movs	r3, #0
   d4bd6:	4909      	ldr	r1, [pc, #36]	; (d4bfc <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x13c>)
   d4bd8:	9307      	str	r3, [sp, #28]
   d4bda:	2001      	movs	r0, #1
   d4bdc:	aa06      	add	r2, sp, #24
   d4bde:	f7ff fc47 	bl	d4470 <log_message>
                    impl->peers_.removeOne(*peer);
   d4be2:	4639      	mov	r1, r7
   d4be4:	f105 0018 	add.w	r0, r5, #24
   d4be8:	f7ff ff02 	bl	d49f0 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_>
        return nullptr;
    }

    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
        auto impl = static_cast<BleLocalDeviceImpl*>(context);
        WiringBleLock lk;
   d4bec:	a803      	add	r0, sp, #12
   d4bee:	f7ff fd81 	bl	d46f4 <_ZN8particle3ble13WiringBleLockD1Ev>
            }
            default: {
                break;
            }
        }
    }
   d4bf2:	b00e      	add	sp, #56	; 0x38
   d4bf4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d4bf8:	000d59fa 	.word	0x000d59fa
   d4bfc:	000d5998 	.word	0x000d5998
   d4c00:	000d5a20 	.word	0x000d5a20
   d4c04:	000d5a3d 	.word	0x000d5a3d

000d4c08 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d4c08:	4802      	ldr	r0, [pc, #8]	; (d4c14 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   d4c0a:	2300      	movs	r3, #0
   d4c0c:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   d4c0e:	f7ff bb57 	b.w	d42c0 <os_mutex_recursive_create>
   d4c12:	bf00      	nop
   d4c14:	2003e3d8 	.word	0x2003e3d8

000d4c18 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d4c18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d4c1a:	4606      	mov	r6, r0
   d4c1c:	460d      	mov	r5, r1
   d4c1e:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d4c20:	2400      	movs	r4, #0
  while (size--) {
   d4c22:	42bd      	cmp	r5, r7
   d4c24:	d00c      	beq.n	d4c40 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d4c26:	6833      	ldr	r3, [r6, #0]
   d4c28:	f815 1b01 	ldrb.w	r1, [r5], #1
   d4c2c:	689b      	ldr	r3, [r3, #8]
   d4c2e:	4630      	mov	r0, r6
   d4c30:	4798      	blx	r3
     if (chunk>=0)
   d4c32:	2800      	cmp	r0, #0
   d4c34:	db01      	blt.n	d4c3a <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d4c36:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d4c38:	e7f3      	b.n	d4c22 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d4c3a:	2c00      	cmp	r4, #0
   d4c3c:	bf08      	it	eq
   d4c3e:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d4c40:	4620      	mov	r0, r4
   d4c42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d4c44 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d4c44:	b570      	push	{r4, r5, r6, lr}
   d4c46:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d4c48:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d4c4a:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d4c4c:	b149      	cbz	r1, d4c62 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d4c4e:	f000 fe61 	bl	d5914 <strlen>
   d4c52:	682b      	ldr	r3, [r5, #0]
   d4c54:	4602      	mov	r2, r0
   d4c56:	4621      	mov	r1, r4
   d4c58:	4628      	mov	r0, r5
   d4c5a:	68db      	ldr	r3, [r3, #12]
    }
   d4c5c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d4c60:	4718      	bx	r3
    }
   d4c62:	bd70      	pop	{r4, r5, r6, pc}

000d4c64 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d4c64:	6803      	ldr	r3, [r0, #0]
   d4c66:	689b      	ldr	r3, [r3, #8]
   d4c68:	4718      	bx	r3

000d4c6a <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d4c6a:	b530      	push	{r4, r5, lr}
   d4c6c:	b08b      	sub	sp, #44	; 0x2c
   d4c6e:	460b      	mov	r3, r1
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d4c70:	2100      	movs	r1, #0
   d4c72:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d4c76:	2a01      	cmp	r2, #1
   d4c78:	bf98      	it	ls
   d4c7a:	220a      	movls	r2, #10
   d4c7c:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
    unsigned long m = n;
    n /= base;
   d4c80:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
   d4c84:	fb05 3312 	mls	r3, r5, r2, r3
   d4c88:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d4c8c:	2b09      	cmp	r3, #9
   d4c8e:	bf94      	ite	ls
   d4c90:	3330      	addls	r3, #48	; 0x30
   d4c92:	3337      	addhi	r3, #55	; 0x37
   d4c94:	b2db      	uxtb	r3, r3
   d4c96:	4621      	mov	r1, r4
   d4c98:	f804 3901 	strb.w	r3, [r4], #-1
   d4c9c:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d4c9e:	2d00      	cmp	r5, #0
   d4ca0:	d1ee      	bne.n	d4c80 <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d4ca2:	f7ff ffcf 	bl	d4c44 <_ZN5Print5writeEPKc>
}
   d4ca6:	b00b      	add	sp, #44	; 0x2c
   d4ca8:	bd30      	pop	{r4, r5, pc}

000d4caa <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
   d4caa:	b410      	push	{r4}
  if (base == 0) return write(n);
   d4cac:	b92a      	cbnz	r2, d4cba <_ZN5Print5printEmi+0x10>
   d4cae:	6803      	ldr	r3, [r0, #0]
  else return printNumber(n, base);
}
   d4cb0:	f85d 4b04 	ldr.w	r4, [sp], #4
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
   d4cb4:	689b      	ldr	r3, [r3, #8]
   d4cb6:	b2c9      	uxtb	r1, r1
   d4cb8:	4718      	bx	r3
  else return printNumber(n, base);
   d4cba:	b2d2      	uxtb	r2, r2
}
   d4cbc:	f85d 4b04 	ldr.w	r4, [sp], #4
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
   d4cc0:	f7ff bfd3 	b.w	d4c6a <_ZN5Print11printNumberEmh>

000d4cc4 <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
   d4cc4:	f7ff bff1 	b.w	d4caa <_ZN5Print5printEmi>

000d4cc8 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d4cc8:	4b01      	ldr	r3, [pc, #4]	; (d4cd0 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d4cca:	4a02      	ldr	r2, [pc, #8]	; (d4cd4 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d4ccc:	601a      	str	r2, [r3, #0]
   d4cce:	4770      	bx	lr
   d4cd0:	2003e3dc 	.word	0x2003e3dc
   d4cd4:	000d5bab 	.word	0x000d5bab

000d4cd8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d4cd8:	4b02      	ldr	r3, [pc, #8]	; (d4ce4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d4cda:	681a      	ldr	r2, [r3, #0]
   d4cdc:	4b02      	ldr	r3, [pc, #8]	; (d4ce8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d4cde:	601a      	str	r2, [r3, #0]
   d4ce0:	4770      	bx	lr
   d4ce2:	bf00      	nop
   d4ce4:	2003e354 	.word	0x2003e354
   d4ce8:	2003e3e0 	.word	0x2003e3e0

000d4cec <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d4cec:	2100      	movs	r1, #0
   d4cee:	f7ff bbcf 	b.w	d4490 <system_delay_ms>

000d4cf2 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d4cf2:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d4cf4:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d4cf6:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d4cf8:	b113      	cbz	r3, d4d00 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d4cfa:	2203      	movs	r2, #3
   d4cfc:	4601      	mov	r1, r0
   d4cfe:	4798      	blx	r3
    }
   d4d00:	4620      	mov	r0, r4
   d4d02:	bd10      	pop	{r4, pc}

000d4d04 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d4d04:	b510      	push	{r4, lr}
   d4d06:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d4d08:	f7ff fff3 	bl	d4cf2 <_ZNSt14_Function_baseD1Ev>
   d4d0c:	4620      	mov	r0, r4
   d4d0e:	bd10      	pop	{r4, pc}

000d4d10 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d4d10:	4803      	ldr	r0, [pc, #12]	; (d4d20 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d4d12:	4a04      	ldr	r2, [pc, #16]	; (d4d24 <_GLOBAL__sub_I_RGB+0x14>)
   d4d14:	4904      	ldr	r1, [pc, #16]	; (d4d28 <_GLOBAL__sub_I_RGB+0x18>)
   d4d16:	2300      	movs	r3, #0
   d4d18:	6083      	str	r3, [r0, #8]
   d4d1a:	f000 bc53 	b.w	d55c4 <__aeabi_atexit>
   d4d1e:	bf00      	nop
   d4d20:	2003e3e4 	.word	0x2003e3e4
   d4d24:	2003e3bc 	.word	0x2003e3bc
   d4d28:	000d4d05 	.word	0x000d4d05

000d4d2c <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d4d2c:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d4d2e:	4b0c      	ldr	r3, [pc, #48]	; (d4d60 <serialEventRun+0x34>)
   d4d30:	b133      	cbz	r3, d4d40 <serialEventRun+0x14>
   d4d32:	f000 f939 	bl	d4fa8 <_Z16_fetch_usbserialv>
   d4d36:	6803      	ldr	r3, [r0, #0]
   d4d38:	691b      	ldr	r3, [r3, #16]
   d4d3a:	4798      	blx	r3
   d4d3c:	2800      	cmp	r0, #0
   d4d3e:	dc09      	bgt.n	d4d54 <serialEventRun+0x28>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d4d40:	4b08      	ldr	r3, [pc, #32]	; (d4d64 <serialEventRun+0x38>)
   d4d42:	b163      	cbz	r3, d4d5e <serialEventRun+0x32>
   d4d44:	f000 f9b2 	bl	d50ac <_Z22__fetch_global_Serial1v>
   d4d48:	6803      	ldr	r3, [r0, #0]
   d4d4a:	691b      	ldr	r3, [r3, #16]
   d4d4c:	4798      	blx	r3
   d4d4e:	2800      	cmp	r0, #0
   d4d50:	dc03      	bgt.n	d4d5a <serialEventRun+0x2e>
   d4d52:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d4d54:	f3af 8000 	nop.w
   d4d58:	e7f2      	b.n	d4d40 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d4d5a:	f3af 8000 	nop.w
   d4d5e:	bd08      	pop	{r3, pc}
	...

000d4d68 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d4d68:	b508      	push	{r3, lr}
	serialEventRun();
   d4d6a:	f7ff ffdf 	bl	d4d2c <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d4d6e:	f7ff fa5b 	bl	d4228 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d4d72:	4b01      	ldr	r3, [pc, #4]	; (d4d78 <_post_loop+0x10>)
   d4d74:	6018      	str	r0, [r3, #0]
   d4d76:	bd08      	pop	{r3, pc}
   d4d78:	2003e734 	.word	0x2003e734

000d4d7c <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d4d7c:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d4d7e:	2300      	movs	r3, #0
   d4d80:	9300      	str	r3, [sp, #0]
   d4d82:	461a      	mov	r2, r3
   d4d84:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d4d88:	f7ff fb9c 	bl	d44c4 <system_ctrl_set_result>
}
   d4d8c:	b003      	add	sp, #12
   d4d8e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d4d94 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d4d94:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d4d96:	8843      	ldrh	r3, [r0, #2]
   d4d98:	2b0a      	cmp	r3, #10
   d4d9a:	d008      	beq.n	d4dae <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d4d9c:	2b50      	cmp	r3, #80	; 0x50
   d4d9e:	d109      	bne.n	d4db4 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d4da0:	4b09      	ldr	r3, [pc, #36]	; (d4dc8 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d4da2:	681b      	ldr	r3, [r3, #0]
   d4da4:	b13b      	cbz	r3, d4db6 <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d4da6:	b003      	add	sp, #12
   d4da8:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d4dac:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d4dae:	f7ff ffe5 	bl	d4d7c <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d4db2:	e006      	b.n	d4dc2 <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d4db4:	2300      	movs	r3, #0
   d4db6:	9300      	str	r3, [sp, #0]
   d4db8:	461a      	mov	r2, r3
   d4dba:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d4dbe:	f7ff fb81 	bl	d44c4 <system_ctrl_set_result>
        break;
    }
}
   d4dc2:	b003      	add	sp, #12
   d4dc4:	f85d fb04 	ldr.w	pc, [sp], #4
   d4dc8:	2003e3f4 	.word	0x2003e3f4

000d4dcc <module_user_init_hook>:

void module_user_init_hook()
{
   d4dcc:	b510      	push	{r4, lr}
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d4dce:	f7ff fa1b 	bl	d4208 <HAL_RNG_GetRandomNumber>
   d4dd2:	4604      	mov	r4, r0
    srand(seed);
   d4dd4:	f000 fd76 	bl	d58c4 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d4dd8:	4b07      	ldr	r3, [pc, #28]	; (d4df8 <module_user_init_hook+0x2c>)
   d4dda:	b113      	cbz	r3, d4de2 <module_user_init_hook+0x16>
        random_seed_from_cloud(seed);
   d4ddc:	4620      	mov	r0, r4
   d4dde:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d4de2:	2100      	movs	r1, #0
   d4de4:	4804      	ldr	r0, [pc, #16]	; (d4df8 <module_user_init_hook+0x2c>)
   d4de6:	f7ff fbcf 	bl	d4588 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d4dea:	2100      	movs	r1, #0
   d4dec:	4803      	ldr	r0, [pc, #12]	; (d4dfc <module_user_init_hook+0x30>)
}
   d4dee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d4df2:	f7ff bb5d 	b.w	d44b0 <system_ctrl_set_app_request_handler>
   d4df6:	bf00      	nop
   d4df8:	00000000 	.word	0x00000000
   d4dfc:	000d4d95 	.word	0x000d4d95

000d4e00 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d4e00:	4770      	bx	lr

000d4e02 <_ZN9IPAddressD0Ev>:
   d4e02:	b510      	push	{r4, lr}
   d4e04:	2118      	movs	r1, #24
   d4e06:	4604      	mov	r4, r0
   d4e08:	f000 fbe1 	bl	d55ce <_ZdlPvj>
   d4e0c:	4620      	mov	r0, r4
   d4e0e:	bd10      	pop	{r4, pc}

000d4e10 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d4e10:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d4e12:	7d03      	ldrb	r3, [r0, #20]
   d4e14:	2b06      	cmp	r3, #6
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d4e16:	b08d      	sub	sp, #52	; 0x34
   d4e18:	460e      	mov	r6, r1
   d4e1a:	f100 0704 	add.w	r7, r0, #4
   d4e1e:	f04f 0400 	mov.w	r4, #0
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d4e22:	d002      	beq.n	d4e2a <_ZNK9IPAddress7printToER5Print+0x1a>
   d4e24:	f100 0508 	add.w	r5, r0, #8
   d4e28:	e018      	b.n	d4e5c <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d4e2a:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d4e2c:	4639      	mov	r1, r7
{
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d4e2e:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d4e32:	232f      	movs	r3, #47	; 0x2f
   d4e34:	462a      	mov	r2, r5
   d4e36:	200a      	movs	r0, #10
   d4e38:	f7ff fa5a 	bl	d42f0 <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d4e3c:	4628      	mov	r0, r5
   d4e3e:	f000 fd69 	bl	d5914 <strlen>
   d4e42:	6833      	ldr	r3, [r6, #0]
   d4e44:	4602      	mov	r2, r0
   d4e46:	68db      	ldr	r3, [r3, #12]
   d4e48:	4629      	mov	r1, r5
   d4e4a:	4630      	mov	r0, r6
   d4e4c:	4798      	blx	r3
   d4e4e:	e00f      	b.n	d4e70 <_ZNK9IPAddress7printToER5Print+0x60>
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d4e50:	b124      	cbz	r4, d4e5c <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d4e52:	212e      	movs	r1, #46	; 0x2e
   d4e54:	4630      	mov	r0, r6
   d4e56:	f7ff ff05 	bl	d4c64 <_ZN5Print5printEc>
   d4e5a:	4404      	add	r4, r0
        n += p.print((*this)[i], DEC);
   d4e5c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d4e60:	220a      	movs	r2, #10
   d4e62:	4630      	mov	r0, r6
   d4e64:	f7ff ff2e 	bl	d4cc4 <_ZN5Print5printEhi>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d4e68:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d4e6a:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d4e6c:	d1f0      	bne.n	d4e50 <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d4e6e:	4620      	mov	r0, r4
    }
    return n;
}
   d4e70:	b00d      	add	sp, #52	; 0x34
   d4e72:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d4e74 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
   d4e74:	b510      	push	{r4, lr}
   d4e76:	4b05      	ldr	r3, [pc, #20]	; (d4e8c <_ZN9IPAddressC1Ev+0x18>)
   d4e78:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d4e7a:	2211      	movs	r2, #17
   d4e7c:	f840 3b04 	str.w	r3, [r0], #4
   d4e80:	2100      	movs	r1, #0
   d4e82:	f000 fd17 	bl	d58b4 <memset>
{
    clear();
}
   d4e86:	4620      	mov	r0, r4
   d4e88:	bd10      	pop	{r4, pc}
   d4e8a:	bf00      	nop
   d4e8c:	000d5c4c 	.word	0x000d5c4c

000d4e90 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d4e90:	4603      	mov	r3, r0
   d4e92:	4a07      	ldr	r2, [pc, #28]	; (d4eb0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d4e94:	b510      	push	{r4, lr}
   d4e96:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d4e9a:	f101 0210 	add.w	r2, r1, #16
   d4e9e:	f851 4b04 	ldr.w	r4, [r1], #4
   d4ea2:	f843 4b04 	str.w	r4, [r3], #4
   d4ea6:	4291      	cmp	r1, r2
   d4ea8:	d1f9      	bne.n	d4e9e <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d4eaa:	780a      	ldrb	r2, [r1, #0]
   d4eac:	701a      	strb	r2, [r3, #0]
}
   d4eae:	bd10      	pop	{r4, pc}
   d4eb0:	000d5c4c 	.word	0x000d5c4c

000d4eb4 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d4eb4:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d4eb6:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d4eba:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d4ebe:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d4ec2:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d4ec6:	2304      	movs	r3, #4
   d4ec8:	6041      	str	r1, [r0, #4]
   d4eca:	7503      	strb	r3, [r0, #20]
   d4ecc:	bd10      	pop	{r4, pc}

000d4ece <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d4ece:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d4ed0:	780d      	ldrb	r5, [r1, #0]
   d4ed2:	788b      	ldrb	r3, [r1, #2]
   d4ed4:	784a      	ldrb	r2, [r1, #1]
   d4ed6:	78c9      	ldrb	r1, [r1, #3]
   d4ed8:	9100      	str	r1, [sp, #0]
   d4eda:	4629      	mov	r1, r5
   d4edc:	f7ff ffea 	bl	d4eb4 <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d4ee0:	b003      	add	sp, #12
   d4ee2:	bd30      	pop	{r4, r5, pc}

000d4ee4 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d4ee4:	7441      	strb	r1, [r0, #17]
   d4ee6:	4770      	bx	lr

000d4ee8 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d4ee8:	4770      	bx	lr

000d4eea <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
   d4eea:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d4eec:	2100      	movs	r1, #0
   d4eee:	7c00      	ldrb	r0, [r0, #16]
   d4ef0:	f7ff fa9e 	bl	d4430 <HAL_USB_USART_Receive_Data>
}
   d4ef4:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d4ef8:	bf28      	it	cs
   d4efa:	f04f 30ff 	movcs.w	r0, #4294967295
   d4efe:	bd08      	pop	{r3, pc}

000d4f00 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
   d4f00:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d4f02:	2101      	movs	r1, #1
   d4f04:	7c00      	ldrb	r0, [r0, #16]
   d4f06:	f7ff fa93 	bl	d4430 <HAL_USB_USART_Receive_Data>
}
   d4f0a:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d4f0e:	bf28      	it	cs
   d4f10:	f04f 30ff 	movcs.w	r0, #4294967295
   d4f14:	bd08      	pop	{r3, pc}

000d4f16 <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
   d4f16:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d4f18:	7c00      	ldrb	r0, [r0, #16]
   d4f1a:	f7ff fa81 	bl	d4420 <HAL_USB_USART_Available_Data_For_Write>
}
   d4f1e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d4f22:	bd08      	pop	{r3, pc}

000d4f24 <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
   d4f24:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d4f26:	7c00      	ldrb	r0, [r0, #16]
   d4f28:	f7ff fa72 	bl	d4410 <HAL_USB_USART_Available_Data>
}
   d4f2c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d4f30:	bd08      	pop	{r3, pc}

000d4f32 <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d4f32:	7c00      	ldrb	r0, [r0, #16]
   d4f34:	f7ff ba8c 	b.w	d4450 <HAL_USB_USART_Flush_Data>

000d4f38 <_ZN9USBSerialD0Ev>:
   d4f38:	b510      	push	{r4, lr}
   d4f3a:	2114      	movs	r1, #20
   d4f3c:	4604      	mov	r4, r0
   d4f3e:	f000 fb46 	bl	d55ce <_ZdlPvj>
   d4f42:	4620      	mov	r0, r4
   d4f44:	bd10      	pop	{r4, pc}

000d4f46 <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d4f46:	b538      	push	{r3, r4, r5, lr}
   d4f48:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d4f4a:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d4f4c:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d4f4e:	f7ff fa67 	bl	d4420 <HAL_USB_USART_Available_Data_For_Write>
   d4f52:	2800      	cmp	r0, #0
   d4f54:	dc01      	bgt.n	d4f5a <_ZN9USBSerial5writeEh+0x14>
   d4f56:	7c60      	ldrb	r0, [r4, #17]
   d4f58:	b128      	cbz	r0, d4f66 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d4f5a:	4629      	mov	r1, r5
   d4f5c:	7c20      	ldrb	r0, [r4, #16]
   d4f5e:	f7ff fa6f 	bl	d4440 <HAL_USB_USART_Send_Data>
   d4f62:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
   d4f66:	bd38      	pop	{r3, r4, r5, pc}

000d4f68 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d4f68:	b510      	push	{r4, lr}
   d4f6a:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d4f6c:	2300      	movs	r3, #0
   d4f6e:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d4f70:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d4f74:	60a3      	str	r3, [r4, #8]
   d4f76:	4b05      	ldr	r3, [pc, #20]	; (d4f8c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d4f78:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d4f7a:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d4f7c:	4608      	mov	r0, r1
{
  _serial = serial;
   d4f7e:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d4f80:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d4f82:	4611      	mov	r1, r2
   d4f84:	f7ff fa34 	bl	d43f0 <HAL_USB_USART_Init>
}
   d4f88:	4620      	mov	r0, r4
   d4f8a:	bd10      	pop	{r4, pc}
   d4f8c:	000d5c60 	.word	0x000d5c60

000d4f90 <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d4f90:	2200      	movs	r2, #0
   d4f92:	7c00      	ldrb	r0, [r0, #16]
   d4f94:	f7ff ba34 	b.w	d4400 <HAL_USB_USART_Begin>

000d4f98 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d4f98:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d4f9a:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d4f9c:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d4f9e:	2100      	movs	r1, #0
   d4fa0:	f000 fc88 	bl	d58b4 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d4fa4:	4620      	mov	r0, r4
   d4fa6:	bd10      	pop	{r4, pc}

000d4fa8 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d4fa8:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d4faa:	4d0e      	ldr	r5, [pc, #56]	; (d4fe4 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d4fac:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d4fae:	a801      	add	r0, sp, #4
   d4fb0:	f7ff fff2 	bl	d4f98 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d4fb4:	6829      	ldr	r1, [r5, #0]
   d4fb6:	f011 0401 	ands.w	r4, r1, #1
   d4fba:	d110      	bne.n	d4fde <_Z16_fetch_usbserialv+0x36>
   d4fbc:	4628      	mov	r0, r5
   d4fbe:	f7ff f870 	bl	d40a2 <__cxa_guard_acquire>
   d4fc2:	b160      	cbz	r0, d4fde <_Z16_fetch_usbserialv+0x36>
   d4fc4:	aa01      	add	r2, sp, #4
   d4fc6:	4621      	mov	r1, r4
   d4fc8:	4807      	ldr	r0, [pc, #28]	; (d4fe8 <_Z16_fetch_usbserialv+0x40>)
   d4fca:	f7ff ffcd 	bl	d4f68 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d4fce:	4628      	mov	r0, r5
   d4fd0:	f7ff f86c 	bl	d40ac <__cxa_guard_release>
   d4fd4:	4a05      	ldr	r2, [pc, #20]	; (d4fec <_Z16_fetch_usbserialv+0x44>)
   d4fd6:	4906      	ldr	r1, [pc, #24]	; (d4ff0 <_Z16_fetch_usbserialv+0x48>)
   d4fd8:	4803      	ldr	r0, [pc, #12]	; (d4fe8 <_Z16_fetch_usbserialv+0x40>)
   d4fda:	f000 faf3 	bl	d55c4 <__aeabi_atexit>
	return _usbserial;
}
   d4fde:	4802      	ldr	r0, [pc, #8]	; (d4fe8 <_Z16_fetch_usbserialv+0x40>)
   d4fe0:	b007      	add	sp, #28
   d4fe2:	bd30      	pop	{r4, r5, pc}
   d4fe4:	2003e3f8 	.word	0x2003e3f8
   d4fe8:	2003e3fc 	.word	0x2003e3fc
   d4fec:	2003e3bc 	.word	0x2003e3bc
   d4ff0:	000d4ee9 	.word	0x000d4ee9

000d4ff4 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d4ff4:	4770      	bx	lr

000d4ff6 <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d4ff6:	7441      	strb	r1, [r0, #17]
   d4ff8:	4770      	bx	lr

000d4ffa <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
   d4ffa:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
   d4ffc:	7c00      	ldrb	r0, [r0, #16]
   d4ffe:	f7ff f9b7 	bl	d4370 <HAL_USART_Available_Data_For_Write>
}
   d5002:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5006:	bd08      	pop	{r3, pc}

000d5008 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d5008:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
   d500a:	7c00      	ldrb	r0, [r0, #16]
   d500c:	f7ff f988 	bl	d4320 <HAL_USART_Available_Data>
}
   d5010:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5014:	bd08      	pop	{r3, pc}

000d5016 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d5016:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
   d5018:	7c00      	ldrb	r0, [r0, #16]
   d501a:	f7ff f991 	bl	d4340 <HAL_USART_Peek_Data>
}
   d501e:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d5022:	bf28      	it	cs
   d5024:	f04f 30ff 	movcs.w	r0, #4294967295
   d5028:	bd08      	pop	{r3, pc}

000d502a <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d502a:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
   d502c:	7c00      	ldrb	r0, [r0, #16]
   d502e:	f7ff f97f 	bl	d4330 <HAL_USART_Read_Data>
}
   d5032:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d5036:	bf28      	it	cs
   d5038:	f04f 30ff 	movcs.w	r0, #4294967295
   d503c:	bd08      	pop	{r3, pc}

000d503e <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d503e:	7c00      	ldrb	r0, [r0, #16]
   d5040:	f7ff b986 	b.w	d4350 <HAL_USART_Flush_Data>

000d5044 <_ZN11USARTSerialD0Ev>:
   d5044:	b510      	push	{r4, lr}
   d5046:	2114      	movs	r1, #20
   d5048:	4604      	mov	r4, r0
   d504a:	f000 fac0 	bl	d55ce <_ZdlPvj>
   d504e:	4620      	mov	r0, r4
   d5050:	bd10      	pop	{r4, pc}

000d5052 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d5052:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d5054:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d5056:	4604      	mov	r4, r0
   d5058:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d505a:	b925      	cbnz	r5, d5066 <_ZN11USARTSerial5writeEh+0x14>
   d505c:	7c00      	ldrb	r0, [r0, #16]
   d505e:	f7ff f987 	bl	d4370 <HAL_USART_Available_Data_For_Write>
   d5062:	2800      	cmp	r0, #0
   d5064:	dd05      	ble.n	d5072 <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d5066:	4631      	mov	r1, r6
   d5068:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d506a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d506e:	f7ff b94f 	b.w	d4310 <HAL_USART_Write_Data>
  }
  return 0;
}
   d5072:	4628      	mov	r0, r5
   d5074:	bd70      	pop	{r4, r5, r6, pc}
	...

000d5078 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d5078:	b510      	push	{r4, lr}
   d507a:	4604      	mov	r4, r0
   d507c:	4608      	mov	r0, r1
   d507e:	4611      	mov	r1, r2
   d5080:	2200      	movs	r2, #0
   d5082:	6062      	str	r2, [r4, #4]
   d5084:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d5088:	60a2      	str	r2, [r4, #8]
   d508a:	4a05      	ldr	r2, [pc, #20]	; (d50a0 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d508c:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d508e:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d5090:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d5092:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d5094:	461a      	mov	r2, r3
   d5096:	f7ff f933 	bl	d4300 <HAL_USART_Init>
}
   d509a:	4620      	mov	r0, r4
   d509c:	bd10      	pop	{r4, pc}
   d509e:	bf00      	nop
   d50a0:	000d5c90 	.word	0x000d5c90

000d50a4 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
   d50a4:	7c00      	ldrb	r0, [r0, #16]
   d50a6:	f7ff b95b 	b.w	d4360 <HAL_USART_Is_Enabled>
	...

000d50ac <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d50ac:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d50ae:	4d0c      	ldr	r5, [pc, #48]	; (d50e0 <_Z22__fetch_global_Serial1v+0x34>)
   d50b0:	6829      	ldr	r1, [r5, #0]
   d50b2:	f011 0401 	ands.w	r4, r1, #1
   d50b6:	d111      	bne.n	d50dc <_Z22__fetch_global_Serial1v+0x30>
   d50b8:	4628      	mov	r0, r5
   d50ba:	f7fe fff2 	bl	d40a2 <__cxa_guard_acquire>
   d50be:	b168      	cbz	r0, d50dc <_Z22__fetch_global_Serial1v+0x30>
   d50c0:	4a08      	ldr	r2, [pc, #32]	; (d50e4 <_Z22__fetch_global_Serial1v+0x38>)
   d50c2:	4b09      	ldr	r3, [pc, #36]	; (d50e8 <_Z22__fetch_global_Serial1v+0x3c>)
   d50c4:	4809      	ldr	r0, [pc, #36]	; (d50ec <_Z22__fetch_global_Serial1v+0x40>)
   d50c6:	4621      	mov	r1, r4
   d50c8:	f7ff ffd6 	bl	d5078 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d50cc:	4628      	mov	r0, r5
   d50ce:	f7fe ffed 	bl	d40ac <__cxa_guard_release>
   d50d2:	4a07      	ldr	r2, [pc, #28]	; (d50f0 <_Z22__fetch_global_Serial1v+0x44>)
   d50d4:	4907      	ldr	r1, [pc, #28]	; (d50f4 <_Z22__fetch_global_Serial1v+0x48>)
   d50d6:	4805      	ldr	r0, [pc, #20]	; (d50ec <_Z22__fetch_global_Serial1v+0x40>)
   d50d8:	f000 fa74 	bl	d55c4 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d50dc:	4803      	ldr	r0, [pc, #12]	; (d50ec <_Z22__fetch_global_Serial1v+0x40>)
   d50de:	bd38      	pop	{r3, r4, r5, pc}
   d50e0:	2003e4a8 	.word	0x2003e4a8
   d50e4:	2003e4ac 	.word	0x2003e4ac
   d50e8:	2003e424 	.word	0x2003e424
   d50ec:	2003e410 	.word	0x2003e410
   d50f0:	2003e3bc 	.word	0x2003e3bc
   d50f4:	000d4ff5 	.word	0x000d4ff5

000d50f8 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c);
  virtual ~TwoWire() {};
   d50f8:	4770      	bx	lr

000d50fa <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d50fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d50fc:	4606      	mov	r6, r0
   d50fe:	4615      	mov	r5, r2
   d5100:	460c      	mov	r4, r1
   d5102:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d5104:	42bc      	cmp	r4, r7
   d5106:	d006      	beq.n	d5116 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d5108:	6833      	ldr	r3, [r6, #0]
   d510a:	f814 1b01 	ldrb.w	r1, [r4], #1
   d510e:	689b      	ldr	r3, [r3, #8]
   d5110:	4630      	mov	r0, r6
   d5112:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d5114:	e7f6      	b.n	d5104 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
   d5116:	4628      	mov	r0, r5
   d5118:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d511a <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
   d511a:	2200      	movs	r2, #0
   d511c:	7c00      	ldrb	r0, [r0, #16]
   d511e:	f7ff b92f 	b.w	d4380 <HAL_I2C_Write_Data>

000d5122 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
   d5122:	2100      	movs	r1, #0
   d5124:	7c00      	ldrb	r0, [r0, #16]
   d5126:	f7ff b933 	b.w	d4390 <HAL_I2C_Available_Data>

000d512a <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
   d512a:	2100      	movs	r1, #0
   d512c:	7c00      	ldrb	r0, [r0, #16]
   d512e:	f7ff b937 	b.w	d43a0 <HAL_I2C_Read_Data>

000d5132 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
   d5132:	2100      	movs	r1, #0
   d5134:	7c00      	ldrb	r0, [r0, #16]
   d5136:	f7ff b93b 	b.w	d43b0 <HAL_I2C_Peek_Data>

000d513a <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
   d513a:	2100      	movs	r1, #0
   d513c:	7c00      	ldrb	r0, [r0, #16]
   d513e:	f7ff b93f 	b.w	d43c0 <HAL_I2C_Flush_Data>

000d5142 <_ZN7TwoWireD0Ev>:
   d5142:	b510      	push	{r4, lr}
   d5144:	2114      	movs	r1, #20
   d5146:	4604      	mov	r4, r0
   d5148:	f000 fa41 	bl	d55ce <_ZdlPvj>
   d514c:	4620      	mov	r0, r4
   d514e:	bd10      	pop	{r4, pc}

000d5150 <_ZN7TwoWireC1E17HAL_I2C_Interface>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
   d5150:	b510      	push	{r4, lr}
   d5152:	4604      	mov	r4, r0
   d5154:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d5158:	4608      	mov	r0, r1
   d515a:	60a3      	str	r3, [r4, #8]
   d515c:	2100      	movs	r1, #0
   d515e:	4b04      	ldr	r3, [pc, #16]	; (d5170 <_ZN7TwoWireC1E17HAL_I2C_Interface+0x20>)
{
  _i2c = i2c;
   d5160:	7420      	strb	r0, [r4, #16]
   d5162:	6061      	str	r1, [r4, #4]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
   d5164:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, NULL);
   d5166:	f7ff f93b 	bl	d43e0 <HAL_I2C_Init>

}
   d516a:	4620      	mov	r0, r4
   d516c:	bd10      	pop	{r4, pc}
   d516e:	bf00      	nop
   d5170:	000d5cc0 	.word	0x000d5cc0

000d5174 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
   d5174:	2100      	movs	r1, #0
   d5176:	7c00      	ldrb	r0, [r0, #16]
   d5178:	f7ff b92a 	b.w	d43d0 <HAL_I2C_Is_Enabled>

000d517c <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d517c:	2200      	movs	r2, #0
   d517e:	4611      	mov	r1, r2
   d5180:	6840      	ldr	r0, [r0, #4]
   d5182:	f7ff b9e1 	b.w	d4548 <network_listening>

000d5186 <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d5186:	2200      	movs	r2, #0
   d5188:	4611      	mov	r1, r2
   d518a:	6840      	ldr	r0, [r0, #4]
   d518c:	f7ff b9ec 	b.w	d4568 <network_get_listen_timeout>

000d5190 <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d5190:	2200      	movs	r2, #0
   d5192:	6840      	ldr	r0, [r0, #4]
   d5194:	f7ff b9e0 	b.w	d4558 <network_set_listen_timeout>

000d5198 <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d5198:	2200      	movs	r2, #0
   d519a:	f081 0101 	eor.w	r1, r1, #1
   d519e:	6840      	ldr	r0, [r0, #4]
   d51a0:	f7ff b9ca 	b.w	d4538 <network_listen>

000d51a4 <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 1, 0, NULL);
   d51a4:	2300      	movs	r3, #0
   d51a6:	461a      	mov	r2, r3
   d51a8:	2101      	movs	r1, #1
   d51aa:	6840      	ldr	r0, [r0, #4]
   d51ac:	f7ff b9bc 	b.w	d4528 <network_off>

000d51b0 <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d51b0:	2300      	movs	r3, #0
   d51b2:	461a      	mov	r2, r3
   d51b4:	4619      	mov	r1, r3
   d51b6:	6840      	ldr	r0, [r0, #4]
   d51b8:	f7ff b9ae 	b.w	d4518 <network_on>

000d51bc <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d51bc:	2200      	movs	r2, #0
   d51be:	4611      	mov	r1, r2
   d51c0:	6840      	ldr	r0, [r0, #4]
   d51c2:	f7ff b9a1 	b.w	d4508 <network_ready>

000d51c6 <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d51c6:	2200      	movs	r2, #0
   d51c8:	4611      	mov	r1, r2
   d51ca:	6840      	ldr	r0, [r0, #4]
   d51cc:	f7ff b98c 	b.w	d44e8 <network_connecting>

000d51d0 <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d51d0:	2200      	movs	r2, #0
   d51d2:	2102      	movs	r1, #2
   d51d4:	6840      	ldr	r0, [r0, #4]
   d51d6:	f7ff b98f 	b.w	d44f8 <network_disconnect>

000d51da <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 1, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d51da:	2300      	movs	r3, #0
   d51dc:	461a      	mov	r2, r3
   d51de:	6840      	ldr	r0, [r0, #4]
   d51e0:	f7ff b97a 	b.w	d44d8 <network_connect>

000d51e4 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   d51e4:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d51e6:	4605      	mov	r5, r0
   d51e8:	b188      	cbz	r0, d520e <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x2a>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d51ea:	6804      	ldr	r4, [r0, #0]
   d51ec:	b14c      	cbz	r4, d5202 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x1e>

    ~_Function_base()
    {
      if (_M_manager)
   d51ee:	68a3      	ldr	r3, [r4, #8]
   d51f0:	b11b      	cbz	r3, d51fa <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d51f2:	2203      	movs	r2, #3
   d51f4:	4621      	mov	r1, r4
   d51f6:	4620      	mov	r0, r4
   d51f8:	4798      	blx	r3
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d51fa:	2110      	movs	r1, #16
   d51fc:	4620      	mov	r0, r4
   d51fe:	f000 f9e6 	bl	d55ce <_ZdlPvj>
   d5202:	4628      	mov	r0, r5
   d5204:	2114      	movs	r1, #20
      }
   d5206:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d520a:	f000 b9e0 	b.w	d55ce <_ZdlPvj>
   d520e:	bd38      	pop	{r3, r4, r5, pc}

000d5210 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>:
   d5210:	b110      	cbz	r0, d5218 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13+0x8>
   d5212:	6803      	ldr	r3, [r0, #0]
   d5214:	685b      	ldr	r3, [r3, #4]
   d5216:	4718      	bx	r3
   d5218:	4770      	bx	lr

000d521a <_ZN6ThreadD1Ev>:
    Thread(Thread&& thread)
        : d_(std::move(thread.d_))
    {
    }

    ~Thread()
   d521a:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d521c:	6803      	ldr	r3, [r0, #0]
   d521e:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (!isValid())
   d5220:	b1bb      	cbz	r3, d5252 <_ZN6ThreadD1Ev+0x38>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
   d5222:	6858      	ldr	r0, [r3, #4]
   d5224:	f7ff f82c 	bl	d4280 <os_thread_is_current>
   d5228:	b978      	cbnz	r0, d524a <_ZN6ThreadD1Ev+0x30>
   d522a:	6823      	ldr	r3, [r4, #0]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
   d522c:	7c5a      	ldrb	r2, [r3, #17]
   d522e:	b912      	cbnz	r2, d5236 <_ZN6ThreadD1Ev+0x1c>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
   d5230:	6858      	ldr	r0, [r3, #4]
   d5232:	f7ff f82d 	bl	d4290 <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
   d5236:	6823      	ldr	r3, [r4, #0]
   d5238:	6858      	ldr	r0, [r3, #4]
   d523a:	f7ff f831 	bl	d42a0 <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d523e:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d5240:	2300      	movs	r3, #0
   d5242:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d5244:	b128      	cbz	r0, d5252 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__p);
   d5246:	f7ff ffcd 	bl	d51e4 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d524a:	6820      	ldr	r0, [r4, #0]
   d524c:	b108      	cbz	r0, d5252 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__ptr);
   d524e:	f7ff ffc9 	bl	d51e4 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>
    }

    ~Thread()
    {
        dispose();
    }
   d5252:	4620      	mov	r0, r4
   d5254:	bd10      	pop	{r4, pc}
	...

000d5258 <_ZN5spark9MeshClassD1Ev>:
    RecursiveMutex mutex_;
    std::unique_ptr<uint8_t[]> buffer_;
    std::atomic_bool exit_;
};

class MeshClass : public NetworkClass, public MeshPublish {
   d5258:	b538      	push	{r3, r4, r5, lr}
   d525a:	4b0c      	ldr	r3, [pc, #48]	; (d528c <_ZN5spark9MeshClassD1Ev+0x34>)
   d525c:	6003      	str	r3, [r0, #0]
   d525e:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5260:	f8d0 01cc 	ldr.w	r0, [r0, #460]	; 0x1cc
   d5264:	b108      	cbz	r0, d526a <_ZN5spark9MeshClassD1Ev+0x12>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d5266:	f7fe ff1a 	bl	d409e <_ZdaPv>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d526a:	f8d4 51c4 	ldr.w	r5, [r4, #452]	; 0x1c4
   d526e:	b135      	cbz	r5, d527e <_ZN5spark9MeshClassD1Ev+0x26>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d5270:	4628      	mov	r0, r5
   d5272:	f7ff ffd2 	bl	d521a <_ZN6ThreadD1Ev>
   d5276:	2104      	movs	r1, #4
   d5278:	4628      	mov	r0, r5
   d527a:	f000 f9a8 	bl	d55ce <_ZdlPvj>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d527e:	68a0      	ldr	r0, [r4, #8]
   d5280:	b108      	cbz	r0, d5286 <_ZN5spark9MeshClassD1Ev+0x2e>
	  get_deleter()(__ptr);
   d5282:	f7ff ffc5 	bl	d5210 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>
   d5286:	4620      	mov	r0, r4
   d5288:	bd38      	pop	{r3, r4, r5, pc}
   d528a:	bf00      	nop
   d528c:	000d5ce8 	.word	0x000d5ce8

000d5290 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   d5290:	b538      	push	{r3, r4, r5, lr}
   d5292:	4c0e      	ldr	r4, [pc, #56]	; (d52cc <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x3c>)
   d5294:	4b0e      	ldr	r3, [pc, #56]	; (d52d0 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x40>)
   d5296:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d5298:	2500      	movs	r5, #0
   d529a:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   d529c:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   d52a0:	6063      	str	r3, [r4, #4]
   d52a2:	60a5      	str	r5, [r4, #8]
   d52a4:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d52a8:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   d52ac:	f7ff f808 	bl	d42c0 <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   d52b0:	4b08      	ldr	r3, [pc, #32]	; (d52d4 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x44>)
   d52b2:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d52b6:	f884 51d0 	strb.w	r5, [r4, #464]	; 0x1d0
   d52ba:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   d52bc:	4620      	mov	r0, r4
   d52be:	4a06      	ldr	r2, [pc, #24]	; (d52d8 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x48>)
   d52c0:	4906      	ldr	r1, [pc, #24]	; (d52dc <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x4c>)
} // namespace spark
   d52c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   d52c6:	f000 b97d 	b.w	d55c4 <__aeabi_atexit>
   d52ca:	bf00      	nop
   d52cc:	2003e530 	.word	0x2003e530
   d52d0:	000d5d50 	.word	0x000d5d50
   d52d4:	000d5ce8 	.word	0x000d5ce8
   d52d8:	2003e3bc 	.word	0x2003e3bc
   d52dc:	000d5259 	.word	0x000d5259

000d52e0 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d52e0:	2200      	movs	r2, #0
   d52e2:	4611      	mov	r1, r2
   d52e4:	6840      	ldr	r0, [r0, #4]
   d52e6:	f7ff b90f 	b.w	d4508 <network_ready>

000d52ea <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d52ea:	2200      	movs	r2, #0
   d52ec:	4611      	mov	r1, r2
   d52ee:	6840      	ldr	r0, [r0, #4]
   d52f0:	f7ff b92a 	b.w	d4548 <network_listening>

000d52f4 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d52f4:	2200      	movs	r2, #0
   d52f6:	4611      	mov	r1, r2
   d52f8:	6840      	ldr	r0, [r0, #4]
   d52fa:	f7ff b935 	b.w	d4568 <network_get_listen_timeout>

000d52fe <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d52fe:	2200      	movs	r2, #0
   d5300:	6840      	ldr	r0, [r0, #4]
   d5302:	f7ff b929 	b.w	d4558 <network_set_listen_timeout>

000d5306 <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d5306:	2200      	movs	r2, #0
   d5308:	f081 0101 	eor.w	r1, r1, #1
   d530c:	6840      	ldr	r0, [r0, #4]
   d530e:	f7ff b913 	b.w	d4538 <network_listen>

000d5312 <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
   d5312:	2300      	movs	r3, #0
   d5314:	461a      	mov	r2, r3
   d5316:	4619      	mov	r1, r3
   d5318:	6840      	ldr	r0, [r0, #4]
   d531a:	f7ff b905 	b.w	d4528 <network_off>

000d531e <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
   d531e:	2300      	movs	r3, #0
   d5320:	461a      	mov	r2, r3
   d5322:	4619      	mov	r1, r3
   d5324:	6840      	ldr	r0, [r0, #4]
   d5326:	f7ff b8f7 	b.w	d4518 <network_on>

000d532a <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d532a:	2200      	movs	r2, #0
   d532c:	4611      	mov	r1, r2
   d532e:	6840      	ldr	r0, [r0, #4]
   d5330:	f7ff b8da 	b.w	d44e8 <network_connecting>

000d5334 <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d5334:	2200      	movs	r2, #0
   d5336:	2102      	movs	r1, #2
   d5338:	6840      	ldr	r0, [r0, #4]
   d533a:	f7ff b8dd 	b.w	d44f8 <network_disconnect>

000d533e <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d533e:	2300      	movs	r3, #0
   d5340:	461a      	mov	r2, r3
   d5342:	6840      	ldr	r0, [r0, #4]
   d5344:	f7ff b8c8 	b.w	d44d8 <network_connect>

000d5348 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d5348:	4b02      	ldr	r3, [pc, #8]	; (d5354 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d534a:	2204      	movs	r2, #4
   d534c:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d534e:	4a02      	ldr	r2, [pc, #8]	; (d5358 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d5350:	601a      	str	r2, [r3, #0]
   d5352:	4770      	bx	lr
   d5354:	2003e704 	.word	0x2003e704
   d5358:	000d5d1c 	.word	0x000d5d1c

000d535c <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d535c:	2300      	movs	r3, #0
   d535e:	461a      	mov	r2, r3
   d5360:	6840      	ldr	r0, [r0, #4]
   d5362:	f7ff b8b9 	b.w	d44d8 <network_connect>

000d5366 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d5366:	2200      	movs	r2, #0
   d5368:	2102      	movs	r1, #2
   d536a:	6840      	ldr	r0, [r0, #4]
   d536c:	f7ff b8c4 	b.w	d44f8 <network_disconnect>

000d5370 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d5370:	2200      	movs	r2, #0
   d5372:	4611      	mov	r1, r2
   d5374:	6840      	ldr	r0, [r0, #4]
   d5376:	f7ff b8b7 	b.w	d44e8 <network_connecting>

000d537a <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d537a:	2200      	movs	r2, #0
   d537c:	4611      	mov	r1, r2
   d537e:	6840      	ldr	r0, [r0, #4]
   d5380:	f7ff b8c2 	b.w	d4508 <network_ready>

000d5384 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d5384:	2300      	movs	r3, #0
   d5386:	461a      	mov	r2, r3
   d5388:	4619      	mov	r1, r3
   d538a:	6840      	ldr	r0, [r0, #4]
   d538c:	f7ff b8c4 	b.w	d4518 <network_on>

000d5390 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d5390:	2300      	movs	r3, #0
   d5392:	461a      	mov	r2, r3
   d5394:	4619      	mov	r1, r3
   d5396:	6840      	ldr	r0, [r0, #4]
   d5398:	f7ff b8c6 	b.w	d4528 <network_off>

000d539c <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d539c:	2200      	movs	r2, #0
   d539e:	f081 0101 	eor.w	r1, r1, #1
   d53a2:	6840      	ldr	r0, [r0, #4]
   d53a4:	f7ff b8c8 	b.w	d4538 <network_listen>

000d53a8 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d53a8:	2200      	movs	r2, #0
   d53aa:	6840      	ldr	r0, [r0, #4]
   d53ac:	f7ff b8d4 	b.w	d4558 <network_set_listen_timeout>

000d53b0 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d53b0:	2200      	movs	r2, #0
   d53b2:	4611      	mov	r1, r2
   d53b4:	6840      	ldr	r0, [r0, #4]
   d53b6:	f7ff b8d7 	b.w	d4568 <network_get_listen_timeout>

000d53ba <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d53ba:	2200      	movs	r2, #0
   d53bc:	4611      	mov	r1, r2
   d53be:	6840      	ldr	r0, [r0, #4]
   d53c0:	f7ff b8c2 	b.w	d4548 <network_listening>

000d53c4 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d53c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d53c8:	2400      	movs	r4, #0

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
}

IPAddress NetworkClass::resolve(const char* name) {
   d53ca:	b095      	sub	sp, #84	; 0x54
   d53cc:	4616      	mov	r6, r2
   d53ce:	460d      	mov	r5, r1
   d53d0:	4607      	mov	r7, r0
    IPAddress addr;
   d53d2:	f7ff fd4f 	bl	d4e74 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
    struct addrinfo hints = {};
   d53d6:	4621      	mov	r1, r4
   d53d8:	2220      	movs	r2, #32
   d53da:	a80c      	add	r0, sp, #48	; 0x30
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d53dc:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d53de:	f000 fa69 	bl	d58b4 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d53e2:	2340      	movs	r3, #64	; 0x40
   d53e4:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d53e6:	4621      	mov	r1, r4
   d53e8:	466b      	mov	r3, sp
   d53ea:	aa0c      	add	r2, sp, #48	; 0x30
   d53ec:	4630      	mov	r0, r6
   d53ee:	f7fe fed3 	bl	d4198 <netdb_getaddrinfo>
    if (!r) {
   d53f2:	4604      	mov	r4, r0
   d53f4:	2800      	cmp	r0, #0
   d53f6:	d144      	bne.n	d5482 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d53f8:	4602      	mov	r2, r0
   d53fa:	2101      	movs	r1, #1
   d53fc:	6868      	ldr	r0, [r5, #4]
   d53fe:	f7ff f883 	bl	d4508 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d5402:	2102      	movs	r1, #2
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d5404:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d5406:	4622      	mov	r2, r4
   d5408:	6868      	ldr	r0, [r5, #4]
   d540a:	f7ff f87d 	bl	d4508 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d540e:	9e00      	ldr	r6, [sp, #0]
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d5410:	4681      	mov	r9, r0
    struct addrinfo hints = {};
    hints.ai_flags = AI_ADDRCONFIG;
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
   d5412:	4621      	mov	r1, r4
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d5414:	2e00      	cmp	r6, #0
   d5416:	d034      	beq.n	d5482 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
   d5418:	2900      	cmp	r1, #0
   d541a:	d132      	bne.n	d5482 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d541c:	6873      	ldr	r3, [r6, #4]
   d541e:	2b02      	cmp	r3, #2
   d5420:	d002      	beq.n	d5428 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   d5422:	2b0a      	cmp	r3, #10
   d5424:	d009      	beq.n	d543a <_ZN5spark12NetworkClass7resolveEPKc+0x76>
   d5426:	e02a      	b.n	d547e <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                case AF_INET: {
                    if (!ipv4) {
   d5428:	f1b8 0f00 	cmp.w	r8, #0
   d542c:	d027      	beq.n	d547e <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d542e:	6971      	ldr	r1, [r6, #20]
   d5430:	4638      	mov	r0, r7
   d5432:	3104      	adds	r1, #4
   d5434:	f7ff fd4b 	bl	d4ece <_ZN9IPAddressaSEPKh>
   d5438:	e020      	b.n	d547c <_ZN5spark12NetworkClass7resolveEPKc+0xb8>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d543a:	f1b9 0f00 	cmp.w	r9, #0
   d543e:	d01e      	beq.n	d547e <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d5440:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d5442:	2211      	movs	r2, #17
   d5444:	a801      	add	r0, sp, #4
   d5446:	f000 fa35 	bl	d58b4 <memset>
                    a.v = 6;
   d544a:	2306      	movs	r3, #6
   d544c:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d5450:	ad01      	add	r5, sp, #4
   d5452:	f104 0308 	add.w	r3, r4, #8
   d5456:	3418      	adds	r4, #24
   d5458:	6818      	ldr	r0, [r3, #0]
   d545a:	6859      	ldr	r1, [r3, #4]
   d545c:	462a      	mov	r2, r5
   d545e:	c203      	stmia	r2!, {r0, r1}
   d5460:	3308      	adds	r3, #8
   d5462:	42a3      	cmp	r3, r4
   d5464:	4615      	mov	r5, r2
   d5466:	d1f7      	bne.n	d5458 <_ZN5spark12NetworkClass7resolveEPKc+0x94>
                    addr = IPAddress(a);
   d5468:	a901      	add	r1, sp, #4
   d546a:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d546c:	ad07      	add	r5, sp, #28
   d546e:	f7ff fd0f 	bl	d4e90 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d5472:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d5474:	1d3c      	adds	r4, r7, #4
   d5476:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d5478:	682b      	ldr	r3, [r5, #0]
   d547a:	7023      	strb	r3, [r4, #0]
                    ok = true;
   d547c:	2101      	movs	r1, #1
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d547e:	69f6      	ldr	r6, [r6, #28]
   d5480:	e7c8      	b.n	d5414 <_ZN5spark12NetworkClass7resolveEPKc+0x50>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d5482:	9800      	ldr	r0, [sp, #0]
   d5484:	f7fe fe80 	bl	d4188 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d5488:	4638      	mov	r0, r7
   d548a:	b015      	add	sp, #84	; 0x54
   d548c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d5490 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d5490:	4b02      	ldr	r3, [pc, #8]	; (d549c <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d5492:	4a03      	ldr	r2, [pc, #12]	; (d54a0 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d5494:	601a      	str	r2, [r3, #0]
   d5496:	2200      	movs	r2, #0
   d5498:	605a      	str	r2, [r3, #4]
   d549a:	4770      	bx	lr
   d549c:	2003e70c 	.word	0x2003e70c
   d54a0:	000d5d50 	.word	0x000d5d50

000d54a4 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
   d54a4:	b510      	push	{r4, lr}
   d54a6:	4604      	mov	r4, r0

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
   d54a8:	480f      	ldr	r0, [pc, #60]	; (d54e8 <pinAvailable+0x44>)
   d54aa:	f7ff f8df 	bl	d466c <_ZN8SPIClass9isEnabledEv>
   d54ae:	b128      	cbz	r0, d54bc <pinAvailable+0x18>
   d54b0:	f1a4 030b 	sub.w	r3, r4, #11
   d54b4:	2b02      	cmp	r3, #2
   d54b6:	d801      	bhi.n	d54bc <pinAvailable+0x18>
  {
    return 0; // 'pin' is used
   d54b8:	2000      	movs	r0, #0
   d54ba:	bd10      	pop	{r4, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
   d54bc:	f000 f862 	bl	d5584 <_Z19__fetch_global_Wirev>
   d54c0:	f7ff fe58 	bl	d5174 <_ZN7TwoWire9isEnabledEv>
   d54c4:	b108      	cbz	r0, d54ca <pinAvailable+0x26>
   d54c6:	2c01      	cmp	r4, #1
   d54c8:	d9f6      	bls.n	d54b8 <pinAvailable+0x14>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
   d54ca:	f7ff fdef 	bl	d50ac <_Z22__fetch_global_Serial1v>
   d54ce:	f7ff fde9 	bl	d50a4 <_ZN11USARTSerial9isEnabledEv>
   d54d2:	b118      	cbz	r0, d54dc <pinAvailable+0x38>
   d54d4:	f1a4 0309 	sub.w	r3, r4, #9
   d54d8:	2b01      	cmp	r3, #1
   d54da:	d9ed      	bls.n	d54b8 <pinAvailable+0x14>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
   d54dc:	2c23      	cmp	r4, #35	; 0x23
   d54de:	bf8c      	ite	hi
   d54e0:	2000      	movhi	r0, #0
   d54e2:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
   d54e4:	bd10      	pop	{r4, pc}
   d54e6:	bf00      	nop
   d54e8:	2003e714 	.word	0x2003e714

000d54ec <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d54ec:	2823      	cmp	r0, #35	; 0x23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
   d54ee:	b538      	push	{r3, r4, r5, lr}
   d54f0:	4604      	mov	r4, r0
   d54f2:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d54f4:	d80a      	bhi.n	d550c <pinMode+0x20>
   d54f6:	29ff      	cmp	r1, #255	; 0xff
   d54f8:	d008      	beq.n	d550c <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d54fa:	f7ff ffd3 	bl	d54a4 <pinAvailable>
   d54fe:	b128      	cbz	r0, d550c <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d5500:	4629      	mov	r1, r5
   d5502:	4620      	mov	r0, r4
}
   d5504:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d5508:	f7fe be56 	b.w	d41b8 <HAL_Pin_Mode>
   d550c:	bd38      	pop	{r3, r4, r5, pc}

000d550e <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d550e:	b538      	push	{r3, r4, r5, lr}
   d5510:	4604      	mov	r4, r0
   d5512:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d5514:	f7fe fe58 	bl	d41c8 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d5518:	28ff      	cmp	r0, #255	; 0xff
   d551a:	d010      	beq.n	d553e <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
   d551c:	2806      	cmp	r0, #6
   d551e:	d804      	bhi.n	d552a <digitalWrite+0x1c>
   d5520:	234d      	movs	r3, #77	; 0x4d
   d5522:	fa23 f000 	lsr.w	r0, r3, r0
   d5526:	07c3      	lsls	r3, r0, #31
   d5528:	d409      	bmi.n	d553e <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d552a:	4620      	mov	r0, r4
   d552c:	f7ff ffba 	bl	d54a4 <pinAvailable>
   d5530:	b128      	cbz	r0, d553e <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d5532:	4629      	mov	r1, r5
   d5534:	4620      	mov	r0, r4
}
   d5536:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
   d553a:	f7fe be4d 	b.w	d41d8 <HAL_GPIO_Write>
   d553e:	bd38      	pop	{r3, r4, r5, pc}

000d5540 <_GLOBAL__sub_I_SPI>:
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d5540:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
   d5542:	4c0c      	ldr	r4, [pc, #48]	; (d5574 <_GLOBAL__sub_I_SPI+0x34>)
   d5544:	4e0c      	ldr	r6, [pc, #48]	; (d5578 <_GLOBAL__sub_I_SPI+0x38>)
   d5546:	4d0d      	ldr	r5, [pc, #52]	; (d557c <_GLOBAL__sub_I_SPI+0x3c>)
   d5548:	2100      	movs	r1, #0
   d554a:	4620      	mov	r0, r4
   d554c:	f7ff f87a 	bl	d4644 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d5550:	4620      	mov	r0, r4

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d5552:	4c0b      	ldr	r4, [pc, #44]	; (d5580 <_GLOBAL__sub_I_SPI+0x40>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
   d5554:	4632      	mov	r2, r6
   d5556:	4629      	mov	r1, r5
   d5558:	f000 f834 	bl	d55c4 <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d555c:	2101      	movs	r1, #1
   d555e:	4620      	mov	r0, r4
   d5560:	f7ff f870 	bl	d4644 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d5564:	4632      	mov	r2, r6
   d5566:	4629      	mov	r1, r5
   d5568:	4620      	mov	r0, r4
   d556a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   d556e:	f000 b829 	b.w	d55c4 <__aeabi_atexit>
   d5572:	bf00      	nop
   d5574:	2003e714 	.word	0x2003e714
   d5578:	2003e3bc 	.word	0x2003e3bc
   d557c:	000d4635 	.word	0x000d4635
   d5580:	2003e724 	.word	0x2003e724

000d5584 <_Z19__fetch_global_Wirev>:
#include "i2c_hal.h"

#ifndef SPARK_WIRING_NO_I2C

TwoWire& __fetch_global_Wire()
{
   d5584:	b538      	push	{r3, r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1);
   d5586:	4d0b      	ldr	r5, [pc, #44]	; (d55b4 <_Z19__fetch_global_Wirev+0x30>)
   d5588:	6829      	ldr	r1, [r5, #0]
   d558a:	f011 0401 	ands.w	r4, r1, #1
   d558e:	d10f      	bne.n	d55b0 <_Z19__fetch_global_Wirev+0x2c>
   d5590:	4628      	mov	r0, r5
   d5592:	f7fe fd86 	bl	d40a2 <__cxa_guard_acquire>
   d5596:	b158      	cbz	r0, d55b0 <_Z19__fetch_global_Wirev+0x2c>
   d5598:	4621      	mov	r1, r4
   d559a:	4807      	ldr	r0, [pc, #28]	; (d55b8 <_Z19__fetch_global_Wirev+0x34>)
   d559c:	f7ff fdd8 	bl	d5150 <_ZN7TwoWireC1E17HAL_I2C_Interface>
   d55a0:	4628      	mov	r0, r5
   d55a2:	f7fe fd83 	bl	d40ac <__cxa_guard_release>
   d55a6:	4a05      	ldr	r2, [pc, #20]	; (d55bc <_Z19__fetch_global_Wirev+0x38>)
   d55a8:	4905      	ldr	r1, [pc, #20]	; (d55c0 <_Z19__fetch_global_Wirev+0x3c>)
   d55aa:	4803      	ldr	r0, [pc, #12]	; (d55b8 <_Z19__fetch_global_Wirev+0x34>)
   d55ac:	f000 f80a 	bl	d55c4 <__aeabi_atexit>
	return wire;
}
   d55b0:	4801      	ldr	r0, [pc, #4]	; (d55b8 <_Z19__fetch_global_Wirev+0x34>)
   d55b2:	bd38      	pop	{r3, r4, r5, pc}
   d55b4:	2003e738 	.word	0x2003e738
   d55b8:	2003e73c 	.word	0x2003e73c
   d55bc:	2003e3bc 	.word	0x2003e3bc
   d55c0:	000d50f9 	.word	0x000d50f9

000d55c4 <__aeabi_atexit>:
   d55c4:	460b      	mov	r3, r1
   d55c6:	4601      	mov	r1, r0
   d55c8:	4618      	mov	r0, r3
   d55ca:	f000 b94b 	b.w	d5864 <__cxa_atexit>

000d55ce <_ZdlPvj>:
   d55ce:	f7fe bd64 	b.w	d409a <_ZdlPv>
	...

000d55d4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d55d4:	4b18      	ldr	r3, [pc, #96]	; (d5638 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d55d6:	681a      	ldr	r2, [r3, #0]
   d55d8:	07d1      	lsls	r1, r2, #31
   d55da:	bf5c      	itt	pl
   d55dc:	2201      	movpl	r2, #1
   d55de:	601a      	strpl	r2, [r3, #0]
   d55e0:	4b16      	ldr	r3, [pc, #88]	; (d563c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d55e2:	681a      	ldr	r2, [r3, #0]
   d55e4:	07d2      	lsls	r2, r2, #31
   d55e6:	bf5c      	itt	pl
   d55e8:	2201      	movpl	r2, #1
   d55ea:	601a      	strpl	r2, [r3, #0]
   d55ec:	4b14      	ldr	r3, [pc, #80]	; (d5640 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d55ee:	681a      	ldr	r2, [r3, #0]
   d55f0:	07d0      	lsls	r0, r2, #31
   d55f2:	bf5c      	itt	pl
   d55f4:	2201      	movpl	r2, #1
   d55f6:	601a      	strpl	r2, [r3, #0]
   d55f8:	4b12      	ldr	r3, [pc, #72]	; (d5644 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d55fa:	681a      	ldr	r2, [r3, #0]
   d55fc:	07d1      	lsls	r1, r2, #31
   d55fe:	bf5c      	itt	pl
   d5600:	2201      	movpl	r2, #1
   d5602:	601a      	strpl	r2, [r3, #0]
   d5604:	4b10      	ldr	r3, [pc, #64]	; (d5648 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d5606:	681a      	ldr	r2, [r3, #0]
   d5608:	07d2      	lsls	r2, r2, #31
   d560a:	bf5c      	itt	pl
   d560c:	2201      	movpl	r2, #1
   d560e:	601a      	strpl	r2, [r3, #0]
   d5610:	4b0e      	ldr	r3, [pc, #56]	; (d564c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d5612:	681a      	ldr	r2, [r3, #0]
   d5614:	07d0      	lsls	r0, r2, #31
   d5616:	bf5c      	itt	pl
   d5618:	2201      	movpl	r2, #1
   d561a:	601a      	strpl	r2, [r3, #0]
   d561c:	4b0c      	ldr	r3, [pc, #48]	; (d5650 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d561e:	681a      	ldr	r2, [r3, #0]
   d5620:	07d1      	lsls	r1, r2, #31
   d5622:	bf5c      	itt	pl
   d5624:	2201      	movpl	r2, #1
   d5626:	601a      	strpl	r2, [r3, #0]
   d5628:	4b0a      	ldr	r3, [pc, #40]	; (d5654 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d562a:	681a      	ldr	r2, [r3, #0]
   d562c:	07d2      	lsls	r2, r2, #31
   d562e:	bf5c      	itt	pl
   d5630:	2201      	movpl	r2, #1
   d5632:	601a      	strpl	r2, [r3, #0]
   d5634:	4770      	bx	lr
   d5636:	bf00      	nop
   d5638:	2003e76c 	.word	0x2003e76c
   d563c:	2003e768 	.word	0x2003e768
   d5640:	2003e764 	.word	0x2003e764
   d5644:	2003e760 	.word	0x2003e760
   d5648:	2003e75c 	.word	0x2003e75c
   d564c:	2003e758 	.word	0x2003e758
   d5650:	2003e754 	.word	0x2003e754
   d5654:	2003e750 	.word	0x2003e750

000d5658 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   d5658:	4b24      	ldr	r3, [pc, #144]	; (d56ec <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   d565a:	681a      	ldr	r2, [r3, #0]
   d565c:	07d0      	lsls	r0, r2, #31
   d565e:	bf5c      	itt	pl
   d5660:	2201      	movpl	r2, #1
   d5662:	601a      	strpl	r2, [r3, #0]
   d5664:	4b22      	ldr	r3, [pc, #136]	; (d56f0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   d5666:	681a      	ldr	r2, [r3, #0]
   d5668:	07d1      	lsls	r1, r2, #31
   d566a:	bf5c      	itt	pl
   d566c:	2201      	movpl	r2, #1
   d566e:	601a      	strpl	r2, [r3, #0]
   d5670:	4b20      	ldr	r3, [pc, #128]	; (d56f4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   d5672:	681a      	ldr	r2, [r3, #0]
   d5674:	07d2      	lsls	r2, r2, #31
   d5676:	bf5c      	itt	pl
   d5678:	2201      	movpl	r2, #1
   d567a:	601a      	strpl	r2, [r3, #0]
   d567c:	4b1e      	ldr	r3, [pc, #120]	; (d56f8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   d567e:	681a      	ldr	r2, [r3, #0]
   d5680:	07d0      	lsls	r0, r2, #31
   d5682:	bf5c      	itt	pl
   d5684:	2201      	movpl	r2, #1
   d5686:	601a      	strpl	r2, [r3, #0]
   d5688:	4b1c      	ldr	r3, [pc, #112]	; (d56fc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   d568a:	681a      	ldr	r2, [r3, #0]
   d568c:	07d1      	lsls	r1, r2, #31
   d568e:	bf5c      	itt	pl
   d5690:	2201      	movpl	r2, #1
   d5692:	601a      	strpl	r2, [r3, #0]
   d5694:	4b1a      	ldr	r3, [pc, #104]	; (d5700 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   d5696:	681a      	ldr	r2, [r3, #0]
   d5698:	07d2      	lsls	r2, r2, #31
   d569a:	bf5c      	itt	pl
   d569c:	2201      	movpl	r2, #1
   d569e:	601a      	strpl	r2, [r3, #0]
   d56a0:	4b18      	ldr	r3, [pc, #96]	; (d5704 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   d56a2:	681a      	ldr	r2, [r3, #0]
   d56a4:	07d0      	lsls	r0, r2, #31
   d56a6:	bf5c      	itt	pl
   d56a8:	2201      	movpl	r2, #1
   d56aa:	601a      	strpl	r2, [r3, #0]
   d56ac:	4b16      	ldr	r3, [pc, #88]	; (d5708 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   d56ae:	681a      	ldr	r2, [r3, #0]
   d56b0:	07d1      	lsls	r1, r2, #31
   d56b2:	bf5c      	itt	pl
   d56b4:	2201      	movpl	r2, #1
   d56b6:	601a      	strpl	r2, [r3, #0]
   d56b8:	4b14      	ldr	r3, [pc, #80]	; (d570c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   d56ba:	681a      	ldr	r2, [r3, #0]
   d56bc:	07d2      	lsls	r2, r2, #31
   d56be:	bf5c      	itt	pl
   d56c0:	2201      	movpl	r2, #1
   d56c2:	601a      	strpl	r2, [r3, #0]
   d56c4:	4b12      	ldr	r3, [pc, #72]	; (d5710 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   d56c6:	681a      	ldr	r2, [r3, #0]
   d56c8:	07d0      	lsls	r0, r2, #31
   d56ca:	bf5c      	itt	pl
   d56cc:	2201      	movpl	r2, #1
   d56ce:	601a      	strpl	r2, [r3, #0]
   d56d0:	4b10      	ldr	r3, [pc, #64]	; (d5714 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   d56d2:	681a      	ldr	r2, [r3, #0]
   d56d4:	07d1      	lsls	r1, r2, #31
   d56d6:	bf5c      	itt	pl
   d56d8:	2201      	movpl	r2, #1
   d56da:	601a      	strpl	r2, [r3, #0]
   d56dc:	4b0e      	ldr	r3, [pc, #56]	; (d5718 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   d56de:	681a      	ldr	r2, [r3, #0]
   d56e0:	07d2      	lsls	r2, r2, #31
   d56e2:	bf5c      	itt	pl
   d56e4:	2201      	movpl	r2, #1
   d56e6:	601a      	strpl	r2, [r3, #0]
   d56e8:	4770      	bx	lr
   d56ea:	bf00      	nop
   d56ec:	2003e79c 	.word	0x2003e79c
   d56f0:	2003e798 	.word	0x2003e798
   d56f4:	2003e794 	.word	0x2003e794
   d56f8:	2003e790 	.word	0x2003e790
   d56fc:	2003e78c 	.word	0x2003e78c
   d5700:	2003e788 	.word	0x2003e788
   d5704:	2003e784 	.word	0x2003e784
   d5708:	2003e780 	.word	0x2003e780
   d570c:	2003e77c 	.word	0x2003e77c
   d5710:	2003e778 	.word	0x2003e778
   d5714:	2003e774 	.word	0x2003e774
   d5718:	2003e770 	.word	0x2003e770

000d571c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   d571c:	4b24      	ldr	r3, [pc, #144]	; (d57b0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   d571e:	681a      	ldr	r2, [r3, #0]
   d5720:	07d0      	lsls	r0, r2, #31
   d5722:	bf5c      	itt	pl
   d5724:	2201      	movpl	r2, #1
   d5726:	601a      	strpl	r2, [r3, #0]
   d5728:	4b22      	ldr	r3, [pc, #136]	; (d57b4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   d572a:	681a      	ldr	r2, [r3, #0]
   d572c:	07d1      	lsls	r1, r2, #31
   d572e:	bf5c      	itt	pl
   d5730:	2201      	movpl	r2, #1
   d5732:	601a      	strpl	r2, [r3, #0]
   d5734:	4b20      	ldr	r3, [pc, #128]	; (d57b8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   d5736:	681a      	ldr	r2, [r3, #0]
   d5738:	07d2      	lsls	r2, r2, #31
   d573a:	bf5c      	itt	pl
   d573c:	2201      	movpl	r2, #1
   d573e:	601a      	strpl	r2, [r3, #0]
   d5740:	4b1e      	ldr	r3, [pc, #120]	; (d57bc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   d5742:	681a      	ldr	r2, [r3, #0]
   d5744:	07d0      	lsls	r0, r2, #31
   d5746:	bf5c      	itt	pl
   d5748:	2201      	movpl	r2, #1
   d574a:	601a      	strpl	r2, [r3, #0]
   d574c:	4b1c      	ldr	r3, [pc, #112]	; (d57c0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   d574e:	681a      	ldr	r2, [r3, #0]
   d5750:	07d1      	lsls	r1, r2, #31
   d5752:	bf5c      	itt	pl
   d5754:	2201      	movpl	r2, #1
   d5756:	601a      	strpl	r2, [r3, #0]
   d5758:	4b1a      	ldr	r3, [pc, #104]	; (d57c4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   d575a:	681a      	ldr	r2, [r3, #0]
   d575c:	07d2      	lsls	r2, r2, #31
   d575e:	bf5c      	itt	pl
   d5760:	2201      	movpl	r2, #1
   d5762:	601a      	strpl	r2, [r3, #0]
   d5764:	4b18      	ldr	r3, [pc, #96]	; (d57c8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   d5766:	681a      	ldr	r2, [r3, #0]
   d5768:	07d0      	lsls	r0, r2, #31
   d576a:	bf5c      	itt	pl
   d576c:	2201      	movpl	r2, #1
   d576e:	601a      	strpl	r2, [r3, #0]
   d5770:	4b16      	ldr	r3, [pc, #88]	; (d57cc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   d5772:	681a      	ldr	r2, [r3, #0]
   d5774:	07d1      	lsls	r1, r2, #31
   d5776:	bf5c      	itt	pl
   d5778:	2201      	movpl	r2, #1
   d577a:	601a      	strpl	r2, [r3, #0]
   d577c:	4b14      	ldr	r3, [pc, #80]	; (d57d0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   d577e:	681a      	ldr	r2, [r3, #0]
   d5780:	07d2      	lsls	r2, r2, #31
   d5782:	bf5c      	itt	pl
   d5784:	2201      	movpl	r2, #1
   d5786:	601a      	strpl	r2, [r3, #0]
   d5788:	4b12      	ldr	r3, [pc, #72]	; (d57d4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   d578a:	681a      	ldr	r2, [r3, #0]
   d578c:	07d0      	lsls	r0, r2, #31
   d578e:	bf5c      	itt	pl
   d5790:	2201      	movpl	r2, #1
   d5792:	601a      	strpl	r2, [r3, #0]
   d5794:	4b10      	ldr	r3, [pc, #64]	; (d57d8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   d5796:	681a      	ldr	r2, [r3, #0]
   d5798:	07d1      	lsls	r1, r2, #31
   d579a:	bf5c      	itt	pl
   d579c:	2201      	movpl	r2, #1
   d579e:	601a      	strpl	r2, [r3, #0]
   d57a0:	4b0e      	ldr	r3, [pc, #56]	; (d57dc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   d57a2:	681a      	ldr	r2, [r3, #0]
   d57a4:	07d2      	lsls	r2, r2, #31
   d57a6:	bf5c      	itt	pl
   d57a8:	2201      	movpl	r2, #1
   d57aa:	601a      	strpl	r2, [r3, #0]
   d57ac:	4770      	bx	lr
   d57ae:	bf00      	nop
   d57b0:	2003e7cc 	.word	0x2003e7cc
   d57b4:	2003e7c8 	.word	0x2003e7c8
   d57b8:	2003e7c4 	.word	0x2003e7c4
   d57bc:	2003e7c0 	.word	0x2003e7c0
   d57c0:	2003e7bc 	.word	0x2003e7bc
   d57c4:	2003e7b8 	.word	0x2003e7b8
   d57c8:	2003e7b4 	.word	0x2003e7b4
   d57cc:	2003e7b0 	.word	0x2003e7b0
   d57d0:	2003e7ac 	.word	0x2003e7ac
   d57d4:	2003e7a8 	.word	0x2003e7a8
   d57d8:	2003e7a4 	.word	0x2003e7a4
   d57dc:	2003e7a0 	.word	0x2003e7a0

000d57e0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d57e0:	4b18      	ldr	r3, [pc, #96]	; (d5844 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d57e2:	681a      	ldr	r2, [r3, #0]
   d57e4:	07d1      	lsls	r1, r2, #31
   d57e6:	bf5c      	itt	pl
   d57e8:	2201      	movpl	r2, #1
   d57ea:	601a      	strpl	r2, [r3, #0]
   d57ec:	4b16      	ldr	r3, [pc, #88]	; (d5848 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d57ee:	681a      	ldr	r2, [r3, #0]
   d57f0:	07d2      	lsls	r2, r2, #31
   d57f2:	bf5c      	itt	pl
   d57f4:	2201      	movpl	r2, #1
   d57f6:	601a      	strpl	r2, [r3, #0]
   d57f8:	4b14      	ldr	r3, [pc, #80]	; (d584c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d57fa:	681a      	ldr	r2, [r3, #0]
   d57fc:	07d0      	lsls	r0, r2, #31
   d57fe:	bf5c      	itt	pl
   d5800:	2201      	movpl	r2, #1
   d5802:	601a      	strpl	r2, [r3, #0]
   d5804:	4b12      	ldr	r3, [pc, #72]	; (d5850 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d5806:	681a      	ldr	r2, [r3, #0]
   d5808:	07d1      	lsls	r1, r2, #31
   d580a:	bf5c      	itt	pl
   d580c:	2201      	movpl	r2, #1
   d580e:	601a      	strpl	r2, [r3, #0]
   d5810:	4b10      	ldr	r3, [pc, #64]	; (d5854 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d5812:	681a      	ldr	r2, [r3, #0]
   d5814:	07d2      	lsls	r2, r2, #31
   d5816:	bf5c      	itt	pl
   d5818:	2201      	movpl	r2, #1
   d581a:	601a      	strpl	r2, [r3, #0]
   d581c:	4b0e      	ldr	r3, [pc, #56]	; (d5858 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d581e:	681a      	ldr	r2, [r3, #0]
   d5820:	07d0      	lsls	r0, r2, #31
   d5822:	bf5c      	itt	pl
   d5824:	2201      	movpl	r2, #1
   d5826:	601a      	strpl	r2, [r3, #0]
   d5828:	4b0c      	ldr	r3, [pc, #48]	; (d585c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d582a:	681a      	ldr	r2, [r3, #0]
   d582c:	07d1      	lsls	r1, r2, #31
   d582e:	bf5c      	itt	pl
   d5830:	2201      	movpl	r2, #1
   d5832:	601a      	strpl	r2, [r3, #0]
   d5834:	4b0a      	ldr	r3, [pc, #40]	; (d5860 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d5836:	681a      	ldr	r2, [r3, #0]
   d5838:	07d2      	lsls	r2, r2, #31
   d583a:	bf5c      	itt	pl
   d583c:	2201      	movpl	r2, #1
   d583e:	601a      	strpl	r2, [r3, #0]
   d5840:	4770      	bx	lr
   d5842:	bf00      	nop
   d5844:	2003e7ec 	.word	0x2003e7ec
   d5848:	2003e7e8 	.word	0x2003e7e8
   d584c:	2003e7e4 	.word	0x2003e7e4
   d5850:	2003e7e0 	.word	0x2003e7e0
   d5854:	2003e7dc 	.word	0x2003e7dc
   d5858:	2003e7d8 	.word	0x2003e7d8
   d585c:	2003e7d4 	.word	0x2003e7d4
   d5860:	2003e7d0 	.word	0x2003e7d0

000d5864 <__cxa_atexit>:
   d5864:	b510      	push	{r4, lr}
   d5866:	4c05      	ldr	r4, [pc, #20]	; (d587c <__cxa_atexit+0x18>)
   d5868:	4613      	mov	r3, r2
   d586a:	b12c      	cbz	r4, d5878 <__cxa_atexit+0x14>
   d586c:	460a      	mov	r2, r1
   d586e:	4601      	mov	r1, r0
   d5870:	2002      	movs	r0, #2
   d5872:	f3af 8000 	nop.w
   d5876:	bd10      	pop	{r4, pc}
   d5878:	4620      	mov	r0, r4
   d587a:	bd10      	pop	{r4, pc}
   d587c:	00000000 	.word	0x00000000

000d5880 <memcmp>:
   d5880:	b510      	push	{r4, lr}
   d5882:	3901      	subs	r1, #1
   d5884:	4402      	add	r2, r0
   d5886:	4290      	cmp	r0, r2
   d5888:	d007      	beq.n	d589a <memcmp+0x1a>
   d588a:	f810 3b01 	ldrb.w	r3, [r0], #1
   d588e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   d5892:	42a3      	cmp	r3, r4
   d5894:	d0f7      	beq.n	d5886 <memcmp+0x6>
   d5896:	1b18      	subs	r0, r3, r4
   d5898:	bd10      	pop	{r4, pc}
   d589a:	2000      	movs	r0, #0
   d589c:	bd10      	pop	{r4, pc}

000d589e <memcpy>:
   d589e:	b510      	push	{r4, lr}
   d58a0:	1e43      	subs	r3, r0, #1
   d58a2:	440a      	add	r2, r1
   d58a4:	4291      	cmp	r1, r2
   d58a6:	d004      	beq.n	d58b2 <memcpy+0x14>
   d58a8:	f811 4b01 	ldrb.w	r4, [r1], #1
   d58ac:	f803 4f01 	strb.w	r4, [r3, #1]!
   d58b0:	e7f8      	b.n	d58a4 <memcpy+0x6>
   d58b2:	bd10      	pop	{r4, pc}

000d58b4 <memset>:
   d58b4:	4402      	add	r2, r0
   d58b6:	4603      	mov	r3, r0
   d58b8:	4293      	cmp	r3, r2
   d58ba:	d002      	beq.n	d58c2 <memset+0xe>
   d58bc:	f803 1b01 	strb.w	r1, [r3], #1
   d58c0:	e7fa      	b.n	d58b8 <memset+0x4>
   d58c2:	4770      	bx	lr

000d58c4 <srand>:
   d58c4:	b538      	push	{r3, r4, r5, lr}
   d58c6:	4b12      	ldr	r3, [pc, #72]	; (d5910 <srand+0x4c>)
   d58c8:	681c      	ldr	r4, [r3, #0]
   d58ca:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d58cc:	4605      	mov	r5, r0
   d58ce:	b9d3      	cbnz	r3, d5906 <srand+0x42>
   d58d0:	2018      	movs	r0, #24
   d58d2:	f7fe fe61 	bl	d4598 <malloc>
   d58d6:	f243 330e 	movw	r3, #13070	; 0x330e
   d58da:	63a0      	str	r0, [r4, #56]	; 0x38
   d58dc:	8003      	strh	r3, [r0, #0]
   d58de:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   d58e2:	8043      	strh	r3, [r0, #2]
   d58e4:	f241 2334 	movw	r3, #4660	; 0x1234
   d58e8:	8083      	strh	r3, [r0, #4]
   d58ea:	f24e 636d 	movw	r3, #58989	; 0xe66d
   d58ee:	80c3      	strh	r3, [r0, #6]
   d58f0:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   d58f4:	8103      	strh	r3, [r0, #8]
   d58f6:	2305      	movs	r3, #5
   d58f8:	8143      	strh	r3, [r0, #10]
   d58fa:	230b      	movs	r3, #11
   d58fc:	8183      	strh	r3, [r0, #12]
   d58fe:	2201      	movs	r2, #1
   d5900:	2300      	movs	r3, #0
   d5902:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d5906:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d5908:	2200      	movs	r2, #0
   d590a:	611d      	str	r5, [r3, #16]
   d590c:	615a      	str	r2, [r3, #20]
   d590e:	bd38      	pop	{r3, r4, r5, pc}
   d5910:	2003e3b8 	.word	0x2003e3b8

000d5914 <strlen>:
   d5914:	4603      	mov	r3, r0
   d5916:	f813 2b01 	ldrb.w	r2, [r3], #1
   d591a:	2a00      	cmp	r2, #0
   d591c:	d1fb      	bne.n	d5916 <strlen+0x2>
   d591e:	1a18      	subs	r0, r3, r0
   d5920:	3801      	subs	r0, #1
   d5922:	4770      	bx	lr

000d5924 <dynalib_user>:
   d5924:	401d 000d 4059 000d 4085 000d 4089 000d     .@..Y@...@...@..
   d5934:	0000 0000                                   ....

000d5938 <_ZTVN5spark13EthernetClassE>:
	...
   d5940:	4617 000d 460d 000d 4603 000d 45f9 000d     .F...F...F...E..
   d5950:	45ed 000d 45e1 000d 45d5 000d 45cd 000d     .E...E...E...E..
   d5960:	45c3 000d 45b9 000d 53c5 000d               .E...E...S..

000d596c <_ZTV8SPIClass>:
	...
   d5974:	4635 000d 4637 000d                         5F..7F..

000d597c <_ZTVSt19_Sp_counted_deleterIPN8particle17BlePeerDeviceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE>:
	...
   d5984:	468d 000d 4693 000d 48b7 000d 46a1 000d     .F...F...H...F..
   d5994:	468f 000d 6977 6972 676e 622e 656c 5300     .F..wiring.ble.S
   d59a4:	6174 7472 6420 7369 6f63 6576 6972 676e     tart discovering
   d59b4:	7320 7265 6976 6563 2e73 5300 6174 7472      services..Start
   d59c4:	6420 7369 6f63 6576 6972 676e 6320 6168      discovering cha
   d59d4:	6172 7463 7265 7369 6974 7363 002e 6550     racteristics..Pe
   d59e4:	7265 6420 7665 6369 2065 7369 6d20 7369     er device is mis
   d59f4:	6973 676e 0021 6146 6c69 6465 7420 206f     sing!.Failed to 
   d5a04:	7061 6570 646e 7020 6565 2072 6543 746e     append peer Cent
   d5a14:	6172 206c 6564 6976 6563 002e 6f43 6e6e     ral device..Conn
   d5a24:	6365 6574 2064 7962 4320 6e65 7274 6c61     ected by Central
   d5a34:	6420 7665 6369 2e65 4400 7369 6f63 6e6e      device..Disconn
   d5a44:	6365 6574 2064 7962 7220 6d65 746f 2065     ected by remote 
   d5a54:	6564 6976 6563 002e 6143 6e6e 746f 6120     device..Cannot a
   d5a64:	6464 6e20 7765 7020 6565 2072 6564 6976     dd new peer devi
   d5a74:	6563 002e 654e 2077 6570 6972 6870 7265     ce..New peripher
   d5a84:	6c61 6920 2073 6f63 6e6e 6365 6574 2e64     al is connected.
   d5a94:	4600 6961 656c 2064 6f74 6120 7070 6e65     .Failed to appen
   d5aa4:	2064 6964 6373 766f 7265 6465 6320 6168     d discovered cha
   d5ab4:	6172 7463 7265 7369 6974 2e63 4600 6961     racteristic..Fai
   d5ac4:	656c 2064 6f74 6120 7070 6e65 2064 6964     led to append di
   d5ad4:	6373 766f 7265 6465 7320 7265 6976 6563     scovered service
   d5ae4:	002e 6146 6c69 6465 7420 206f 7061 6570     ..Failed to appe
   d5af4:	646e 6c20 636f 6c61 6320 6168 6172 7463     nd local charact
   d5b04:	7265 7369 6974 2e63 4400 7075 696c 6163     eristic..Duplica
   d5b14:	6574 2064 6863 7261 6361 6574 6972 7473     ted characterist
   d5b24:	6369 6320 6e61 6f6e 2074 6562 6120 6464     ic cannot be add
   d5b34:	6465 002e 6162 6475 5300 7265 6169 006c     ed..baud.Serial.
   d5b44:	6553 6972 6c61 0031 7974 6570 7000 7261     Serial1.type.par
   d5b54:	6d61 6300 646d 6900 0064 6e68 0064 7473     am.cmd.id.hnd.st
   d5b64:	6d72 6600 6c69 0074 766c 006c 6461 4864     rm.filt.lvl.addH
   d5b74:	6e61 6c64 7265 7200 6d65 766f 4865 6e61     andler.removeHan
   d5b84:	6c64 7265 6500 756e 486d 6e61 6c64 7265     dler.enumHandler
   d5b94:	0073 534a 4e4f 7453 6572 6d61 6f4c 4867     s.JSONStreamLogH
   d5ba4:	6e61 6c64 7265 6100 7070 2500 3130 7530     andler.app.%010u
   d5bb4:	0020 205d 2500 0064 202c 2800 3a29 0020      .] .%d., .(): .
   d5bc4:	5b20 6300 646f 2065 203d 2500 0069 6564      [.code = .%i.de
   d5bd4:	6174 6c69 2073 203d 0d00 000a 0066 6e6c     tails = ....f.ln
   d5be4:	6600 006e 6f63 6564 6400 7465 6961 006c     .fn.code.detail.
   d5bf4:	6f6e 656e 7400 6172 6563 6900 666e 006f     none.trace.info.
   d5c04:	6177 6e72 6500 7272 726f 7000 6e61 6369     warn.error.panic
   d5c14:	6100 6c6c 5a00 2500 302b 6433 253a 3230     .all.Z.%+03d:%02
   d5c24:	0075 5925 252d 2d6d 6425 2554 3a48 4d25     u.%Y-%m-%dT%H:%M
   d5c34:	253a 2553 007a 7361 7463 6d69 0065 0000     :%S%z.asctime...

000d5c44 <_ZTV9IPAddress>:
	...
   d5c4c:	4e11 000d 4e01 000d 4e03 000d               .N...N...N..

000d5c58 <_ZTV9USBSerial>:
	...
   d5c60:	4ee9 000d 4f39 000d 4f47 000d 4c19 000d     .N..9O..GO...L..
   d5c70:	4f25 000d 4eeb 000d 4f01 000d 4f33 000d     %O...N...O..3O..
   d5c80:	4f17 000d 4ee5 000d                         .O...N..

000d5c88 <_ZTV11USARTSerial>:
	...
   d5c90:	4ff5 000d 5045 000d 5053 000d 4c19 000d     .O..EP..SP...L..
   d5ca0:	5009 000d 502b 000d 5017 000d 503f 000d     .P..+P...P..?P..
   d5cb0:	4ff7 000d 4ffb 000d                         .O...O..

000d5cb8 <_ZTV7TwoWire>:
	...
   d5cc0:	50f9 000d 5143 000d 511b 000d 50fb 000d     .P..CQ...Q...P..
   d5cd0:	5123 000d 512b 000d 5133 000d 513b 000d     #Q..+Q..3Q..;Q..

000d5ce0 <_ZTVN5spark9MeshClassE>:
	...
   d5ce8:	51db 000d 51d1 000d 51c7 000d 51bd 000d     .Q...Q...Q...Q..
   d5cf8:	51b1 000d 51a5 000d 5199 000d 5191 000d     .Q...Q...Q...Q..
   d5d08:	5187 000d 517d 000d 53c5 000d               .Q..}Q...S..

000d5d14 <_ZTVN5spark9WiFiClassE>:
	...
   d5d1c:	533f 000d 5335 000d 532b 000d 52e1 000d     ?S..5S..+S...R..
   d5d2c:	531f 000d 5313 000d 5307 000d 52ff 000d     .S...S...S...R..
   d5d3c:	52f5 000d 52eb 000d 53c5 000d               .R...R...S..

000d5d48 <_ZTVN5spark12NetworkClassE>:
	...
   d5d50:	535d 000d 5367 000d 5371 000d 537b 000d     ]S..gS..qS..{S..
   d5d60:	5385 000d 5391 000d 539d 000d 53a9 000d     .S...S...S...S..
   d5d70:	53b1 000d 53bb 000d 53c5 000d               .S...S...S..

000d5d7c <__sf_fake_stdin>:
	...

000d5d9c <__sf_fake_stdout>:
	...

000d5dbc <__sf_fake_stderr>:
	...
   d5ddc:	0043                                        C.

000d5dde <link_const_variable_data_end>:
	...

000d5de0 <link_constructors_location>:
   d5de0:	000d4177 	.word	0x000d4177
   d5de4:	000d4621 	.word	0x000d4621
   d5de8:	000d4675 	.word	0x000d4675
   d5dec:	000d4c09 	.word	0x000d4c09
   d5df0:	000d4cc9 	.word	0x000d4cc9
   d5df4:	000d4cd9 	.word	0x000d4cd9
   d5df8:	000d4d11 	.word	0x000d4d11
   d5dfc:	000d5291 	.word	0x000d5291
   d5e00:	000d5349 	.word	0x000d5349
   d5e04:	000d5491 	.word	0x000d5491
   d5e08:	000d5541 	.word	0x000d5541
   d5e0c:	000d55d5 	.word	0x000d55d5
   d5e10:	000d5659 	.word	0x000d5659
   d5e14:	000d571d 	.word	0x000d571d
   d5e18:	000d57e1 	.word	0x000d57e1

000d5e1c <link_constructors_end>:
   d5e1c:	00000000 	.word	0x00000000
